[{"C:\\Users\\Lina\\Downloads\\3D-O\\frontend\\src\\components\\Navbar\\index.js":"1","C:\\Users\\Lina\\Downloads\\3D-O\\frontend\\src\\components\\Navbar\\NavbarElements.js":"2","C:\\Users\\Lina\\Downloads\\3D-O\\frontend\\src\\pages\\colouring.js":"3","C:\\Users\\Lina\\Downloads\\3D-O\\frontend\\src\\components\\Row\\index.js":"4","C:\\Users\\Lina\\Downloads\\3D-O\\frontend\\src\\components\\Pixel\\index.js":"5","C:\\Users\\Lina\\Downloads\\3D-O\\frontend\\src\\models\\ColoringForm.js":"6","C:\\Users\\Lina\\Downloads\\3D-O\\frontend\\src\\components\\OrigamiObject\\index.js":"7","C:\\Users\\Lina\\Downloads\\3D-O\\frontend\\src\\components\\SpecialRow\\index.js":"8","C:\\Users\\Lina\\Downloads\\3D-O\\frontend\\src\\components\\DrawingSection\\index.js":"9","C:\\Users\\Lina\\Downloads\\3D-O\\frontend\\src\\pages\\result.js":"10","C:\\Users\\Lina\\Downloads\\3D-O\\frontend\\src\\pages\\index.js":"11","C:\\Users\\Lina\\Downloads\\3D-O\\frontend\\src\\index.js":"12","C:\\Users\\Lina\\Downloads\\3D-O\\frontend\\src\\components\\SpecialPixel\\index.js":"13","C:\\Users\\Lina\\Downloads\\3D-O\\frontend\\src\\pages\\landing.js":"14","C:\\Users\\Lina\\Downloads\\3D-O\\frontend\\src\\pages\\about.js":"15","C:\\Users\\Lina\\Downloads\\3D-O\\frontend\\src\\pages\\contact.js":"16","C:\\Users\\Lina\\Downloads\\3D-O\\frontend\\src\\pages\\learn.js":"17","C:\\Users\\Lina\\Downloads\\3D-O\\frontend\\src\\pages\\browse.js":"18","C:\\Users\\Lina\\Downloads\\3D-O\\frontend\\src\\pages\\gallery.js":"19","C:\\Users\\Lina\\Downloads\\3D-O\\frontend\\src\\pages\\create.js":"20","C:\\Users\\Lina\\Downloads\\3D-O\\frontend\\src\\pages\\create-vase.js":"21","C:\\Users\\Lina\\Downloads\\3D-O\\frontend\\src\\pages\\create-basket.js":"22","C:\\Users\\Lina\\Downloads\\3D-O\\frontend\\src\\models\\VaseStore.js":"23","C:\\Users\\Lina\\Downloads\\3D-O\\frontend\\src\\components\\Vase\\index.js":"24","C:\\Users\\Lina\\Downloads\\3D-O\\frontend\\src\\pages\\create-figurine.js":"25","C:\\Users\\Lina\\Downloads\\3D-O\\frontend\\src\\components\\App.jsx":"26","C:\\Users\\Lina\\Downloads\\3D-O\\frontend\\src\\models\\RootStore.js":"27","C:\\Users\\Lina\\Downloads\\3D-O\\frontend\\src\\models\\RootStoreContext.js":"28","C:\\Users\\Lina\\Downloads\\3D-O\\frontend\\src\\components\\ResultVase\\index.js":"29","C:\\Users\\Lina\\Downloads\\3D-O\\frontend\\src\\pages\\create-swan.js":"30","C:\\Users\\Lina\\Downloads\\3D-O\\frontend\\src\\models\\BasketStore.js":"31","C:\\Users\\Lina\\Downloads\\3D-O\\frontend\\src\\components\\Basket\\index.js":"32","C:\\Users\\Lina\\Downloads\\3D-O\\frontend\\src\\components\\Figurine\\index.js":"33","C:\\Users\\Lina\\Downloads\\3D-O\\frontend\\src\\models\\FigurineStore.js":"34","C:\\Users\\Lina\\Downloads\\3D-O\\frontend\\src\\components\\Wing\\index.js":"35","C:\\Users\\Lina\\Downloads\\3D-O\\frontend\\src\\models\\SwanStore.js":"36","C:\\Users\\Lina\\Downloads\\3D-O\\frontend\\src\\components\\Swan\\index.js":"37","C:\\Users\\Lina\\Downloads\\3D-O\\frontend\\src\\models\\RowModel.js":"38","C:\\Users\\Lina\\Downloads\\3D-O\\frontend\\src\\models\\PxModel.js":"39","C:\\Users\\Lina\\Downloads\\3D-O\\frontend\\src\\models\\DrawingSectionModel.js":"40","C:\\Users\\Lina\\Downloads\\3D-O\\frontend\\src\\components\\ResultBasket\\index.js":"41","C:\\Users\\Lina\\Downloads\\3D-O\\frontend\\src\\components\\ResultFigurine\\index.js":"42","C:\\Users\\Lina\\Downloads\\3D-O\\frontend\\src\\components\\TriangleSection\\index.js":"43","C:\\Users\\Lina\\Downloads\\3D-O\\frontend\\src\\components\\UntrackedPixel\\index.js":"44","C:\\Users\\Lina\\Downloads\\3D-O\\frontend\\src\\components\\UntrackedRow\\index.js":"45"},{"size":1510,"mtime":1609891263039,"results":"46","hashOfConfig":"47"},{"size":2441,"mtime":1609891980288,"results":"48","hashOfConfig":"47"},{"size":7049,"mtime":1615329326210,"results":"49","hashOfConfig":"47"},{"size":917,"mtime":1615326159590,"results":"50","hashOfConfig":"47"},{"size":2011,"mtime":1615327462905,"results":"51","hashOfConfig":"47"},{"size":3603,"mtime":1615327233996,"results":"52","hashOfConfig":"47"},{"size":4493,"mtime":1615326676614,"results":"53","hashOfConfig":"47"},{"size":1069,"mtime":1609716554127,"results":"54","hashOfConfig":"47"},{"size":4053,"mtime":1615328786738,"results":"55","hashOfConfig":"47"},{"size":5723,"mtime":1615177816847,"results":"56","hashOfConfig":"47"},{"size":1593,"mtime":1609839774040,"results":"57","hashOfConfig":"47"},{"size":214,"mtime":1609716554127,"results":"58","hashOfConfig":"47"},{"size":1243,"mtime":1615191345966,"results":"59","hashOfConfig":"47"},{"size":297,"mtime":1609716554127,"results":"60","hashOfConfig":"47"},{"size":293,"mtime":1609472777303,"results":"61","hashOfConfig":"47"},{"size":1150,"mtime":1610495735796,"results":"62","hashOfConfig":"47"},{"size":291,"mtime":1608011948611,"results":"63","hashOfConfig":"47"},{"size":294,"mtime":1608011921561,"results":"64","hashOfConfig":"47"},{"size":297,"mtime":1608011922576,"results":"65","hashOfConfig":"47"},{"size":975,"mtime":1609659644239,"results":"66","hashOfConfig":"47"},{"size":12994,"mtime":1615098826363,"results":"67","hashOfConfig":"47"},{"size":10986,"mtime":1615098836453,"results":"68","hashOfConfig":"47"},{"size":9908,"mtime":1615106175803,"results":"69","hashOfConfig":"47"},{"size":5249,"mtime":1615094195361,"results":"70","hashOfConfig":"47"},{"size":6500,"mtime":1615098834503,"results":"71","hashOfConfig":"47"},{"size":995,"mtime":1610493864750,"results":"72","hashOfConfig":"47"},{"size":631,"mtime":1611118265327,"results":"73","hashOfConfig":"47"},{"size":1233,"mtime":1609994512388,"results":"74","hashOfConfig":"47"},{"size":4440,"mtime":1615163436251,"results":"75","hashOfConfig":"47"},{"size":6427,"mtime":1615327187410,"results":"76","hashOfConfig":"47"},{"size":7116,"mtime":1615326738213,"results":"77","hashOfConfig":"47"},{"size":9140,"mtime":1615164263125,"results":"78","hashOfConfig":"47"},{"size":10260,"mtime":1615176919259,"results":"79","hashOfConfig":"47"},{"size":4617,"mtime":1615178165197,"results":"80","hashOfConfig":"47"},{"size":3993,"mtime":1614070100256,"results":"81","hashOfConfig":"47"},{"size":3939,"mtime":1615327093417,"results":"82","hashOfConfig":"47"},{"size":12017,"mtime":1615165822314,"results":"83","hashOfConfig":"47"},{"size":608,"mtime":1615096852068,"results":"84","hashOfConfig":"47"},{"size":542,"mtime":1615326093425,"results":"85","hashOfConfig":"47"},{"size":599,"mtime":1615096658894,"results":"86","hashOfConfig":"47"},{"size":9233,"mtime":1615178440755,"results":"87","hashOfConfig":"47"},{"size":11273,"mtime":1615178876682,"results":"88","hashOfConfig":"47"},{"size":1151,"mtime":1615327515486,"results":"89","hashOfConfig":"47"},{"size":1871,"mtime":1615327487648,"results":"90","hashOfConfig":"47"},{"size":675,"mtime":1615327580639,"results":"91","hashOfConfig":"47"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"95"},"ub3yuq",{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"101","messages":"102","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"103","messages":"104","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"105","messages":"106","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"107","messages":"108","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"109","messages":"110","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"95"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"114","messages":"115","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"119"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"95"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"127"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"134"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"127"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"142"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"142"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"127"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"158"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"95"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"119"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"145"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"95"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"177","messages":"178","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"95"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"142"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"185","messages":"186","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"142"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"190","messages":"191","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"142"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"202"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"205","usedDeprecatedRules":"95"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"208","messages":"209","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Lina\\Downloads\\3D-O\\frontend\\src\\components\\Navbar\\index.js",["213","214","215"],"import React from 'react';\r\nimport {\r\n  Nav,\r\n  NavLink,\r\n  Bars,\r\n  NavMenu,\r\n  NavBtn,\r\n  NavBtnLink, \r\n  PlainLink\r\n} from './NavbarElements';\r\nimport logo from \"../../assets/complex-logo.png\"\r\n\r\nconst Navbar = () => {\r\n  return (\r\n    <>\r\n      <Nav>\r\n        <PlainLink to='/'><img style={{height: 60, margin: 20, float: 'left'}}src={logo} alt='logo' /></PlainLink>\r\n        <PlainLink to='/'>\r\n          <p style ={{letterSpacing: 3, marginRight: 100, color:\"white\", float: 'left'}}>3d-o</p>\r\n        </PlainLink>\r\n        {/* <Bars /> */}\r\n        <NavMenu>\r\n          <NavLink to='/about'>\r\n            <p style ={{letterSpacing: 2}}>about</p>\r\n          </NavLink>\r\n          <NavLink to='/learn' >\r\n            <p style ={{letterSpacing: 2}}>learn</p>\r\n          </NavLink>\r\n          <NavLink to='/create'>\r\n            <p style ={{letterSpacing: 2}}>create</p>\r\n          </NavLink>\r\n          <NavLink to='/browse'>\r\n            <p style ={{letterSpacing: 2}}>browse</p>\r\n          </NavLink>\r\n          <NavLink to='/gallery'>\r\n            <p style ={{letterSpacing: 2}}>gallery</p>\r\n          </NavLink>\r\n          <NavLink to='/contact'>\r\n            <p style ={{letterSpacing: 2}}>contact</p>\r\n          </NavLink>\r\n          {/* Second Nav */}\r\n          {/* <NavBtnLink to='/sign-in'>Sign In</NavBtnLink> */}\r\n        </NavMenu>\r\n        {/* <NavBtn>\r\n          <NavBtnLink to='/signin'>Sign In</NavBtnLink>\r\n        </NavBtn> */}\r\n      </Nav>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n",["216","217"],"C:\\Users\\Lina\\Downloads\\3D-O\\frontend\\src\\components\\Navbar\\NavbarElements.js",[],["218","219"],"C:\\Users\\Lina\\Downloads\\3D-O\\frontend\\src\\pages\\colouring.js",["220","221","222","223","224","225"],"C:\\Users\\Lina\\Downloads\\3D-O\\frontend\\src\\components\\Row\\index.js",["226","227"],"C:\\Users\\Lina\\Downloads\\3D-O\\frontend\\src\\components\\Pixel\\index.js",["228","229","230","231"],"C:\\Users\\Lina\\Downloads\\3D-O\\frontend\\src\\models\\ColoringForm.js",["232","233","234"],"C:\\Users\\Lina\\Downloads\\3D-O\\frontend\\src\\components\\OrigamiObject\\index.js",["235","236","237"],"C:\\Users\\Lina\\Downloads\\3D-O\\frontend\\src\\components\\SpecialRow\\index.js",["238","239","240","241"],"import React from \"react\";\r\nimport \"./specialRow.css\";\r\nimport SpecialPixel from \"../SpecialPixel\";\r\n\r\nexport default function SpecialRow(props) {\r\n  const { width, offset, specialTop, specialBottom } = props;\r\n\r\n  let pixels = [];\r\n\r\n  const my_dict = specialBottom ? specialBottom : specialTop\r\n  let count = 0 \r\n\r\n  pixels.push(<SpecialPixel key={-1} on={false} num={\"\"}/>)\r\n\r\n  for (let i = 0; i < width; i++) {\r\n    if (i in my_dict){\r\n      if (my_dict[i] == 1){\r\n        count += 1\r\n        pixels.push(<SpecialPixel key={i} on={true} markerNum={count}/>);\r\n      }\r\n      else if (my_dict[i] == -1){\r\n        pixels.push(<SpecialPixel key={i} on={true} rounded={true}/>);\r\n      }\r\n      else if (i == width-1 && my_dict[i] == 0){\r\n        pixels[0] = <SpecialPixel key={i} on={true}/>\r\n      }\r\n      else{\r\n        pixels.push(<SpecialPixel key={i} on={true}/>);\r\n      }\r\n    }\r\n    else{\r\n        pixels.push(<SpecialPixel key={i} on={false} num = {i+1}/>);\r\n    }\r\n  }\r\n\r\n  return <div style={{marginLeft: offset}} className=\"specialRow\">{pixels}</div>;\r\n}","C:\\Users\\Lina\\Downloads\\3D-O\\frontend\\src\\components\\DrawingSection\\index.js",["242","243","244","245","246","247","248","249"],"C:\\Users\\Lina\\Downloads\\3D-O\\frontend\\src\\pages\\result.js",["250","251","252","253","254","255","256","257","258","259","260","261","262","263","264"],"C:\\Users\\Lina\\Downloads\\3D-O\\frontend\\src\\pages\\index.js",["265"],"import React from 'react';\r\nimport Navbar from '../components/Navbar';\r\n\r\nimport Landing from './landing';\r\nimport About from './about';\r\nimport Learn from './learn';\r\nimport Contact from './contact';\r\nimport Create from './create';\r\nimport Gallery from './gallery';\r\nimport Browse from './browse';\r\nimport CreateSwan from \"./create-swan\"\r\nimport CreateVase from \"./create-vase\"\r\nimport CreateBasket from \"./create-basket\"\r\nimport CreateFigurine from \"./create-figurine\"\r\nimport Result from \"./result\"\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\n\r\n\r\nconst Home = () => {\r\n  return (\r\n  <div className=\"Background\">\r\n    <div className=\"InnerApp\"> \r\n      <Navbar/>\r\n      <Switch>\r\n        <Route path='/about' component={About} />\r\n        <Route path='/create' component={Create} />\r\n        <Route path='/learn' component={Learn} />\r\n        <Route path='/contact' component={Contact} />\r\n        <Route path='/gallery' component={Gallery} />\r\n        <Route path='/browse' component={Browse} />\r\n        <Route path='/create-swan' component={CreateSwan} />\r\n        <Route path='/create-vase' component={CreateVase} />\r\n        <Route path='/create-basket' component={CreateBasket} />\r\n        <Route path='/create-figurine' component={CreateFigurine} />\r\n        <Route path='/Result' component={Result} />\r\n        <Route path='/' component={Landing}/>\r\n      </Switch>\r\n    </div>\r\n    <p style={{marginBottom: 30, marginTop: 20, letterSpacing: 1.5, color: \"#E33937\", fontSize:13}}>lina nguyen 🍓 2021</p>\r\n  </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n",["266","267"],"C:\\Users\\Lina\\Downloads\\3D-O\\frontend\\src\\index.js",[],"C:\\Users\\Lina\\Downloads\\3D-O\\frontend\\src\\components\\SpecialPixel\\index.js",["268"],"import React, { useState } from \"react\";\r\nimport \"./specialPixel.css\";\r\n\r\nexport default function SpecialPixel(props) {\r\n  const {on, num, markerNum, displayRowNum, rounded} = props;\r\n\r\n  if (on){\r\n    if (markerNum){\r\n      return (\r\n        <div\r\n          className=\"specialPixelOn\"\r\n        ><p style={{marginTop: -4, fontSize: 10, marginLeft: -1.1, position:'absolute', background: \"#FF6C7B\", paddingLeft: 2.5, paddingRight:2.5, borderRadius:6, color:\"white\"}}> {markerNum}</p></div>\r\n      );\r\n    } else {\r\n      if (rounded){\r\n        return (\r\n          <div className=\"roundedRight\"\r\n          ></div>\r\n        );\r\n      }\r\n      else{\r\n        return (\r\n          <div className=\"specialPixelOn\"\r\n          ></div>\r\n        );\r\n      }\r\n    }\r\n  } \r\n  else {\r\n    if (displayRowNum){\r\n      return (\r\n        <div\r\n          className=\"rowMarkerPixel\"\r\n        >\r\n          <p style={{fontSize:9, marginLeft: 5, marginTop:0, position:'absolute'}}>{displayRowNum}</p>\r\n          </div>\r\n      );\r\n    }\r\n    else{\r\n      return (\r\n        <div\r\n          className=\"specialPixelOff\"\r\n        >\r\n          <p style={{fontSize:10, marginLeft: 4, marginTop: -4, position:'absolute'}}>{num}</p>\r\n          </div>\r\n      );\r\n    }\r\n  }\r\n}","C:\\Users\\Lina\\Downloads\\3D-O\\frontend\\src\\pages\\landing.js",[],["269","270"],"C:\\Users\\Lina\\Downloads\\3D-O\\frontend\\src\\pages\\about.js",[],["271","272"],"C:\\Users\\Lina\\Downloads\\3D-O\\frontend\\src\\pages\\contact.js",["273","274","275","276"],"import React from 'react';\r\nimport bg from \"../assets/logo-bg.png\"\r\nimport bgOff from \"../assets/logo-bg-off.png\"\r\nimport straw from \"../assets/strawberry-slider-big.png\"\r\nimport \"./create-vase.css\"\r\n\r\nconst Contact = () => {\r\n  return (\r\n    <div\r\n      style={{\r\n        height: '486px',\r\n        backgroundImage: `url(${bg})`, \r\n        backgroundPosition: \"50%\"\r\n      }}\r\n    >\r\n      <div className=\"info-box\" >\r\n        <img src={straw} className =\"straw-l\"/>\r\n        <img src={straw} className =\"straw-m\"/>\r\n        <img src={straw} className =\"straw-r\"/>\r\n        <p className = \"app-name\">3d-o<br/>engineering x art</p>\r\n        <p className = \"name\">— lina nguyen —</p>\r\n        <div className=\"left\">\r\n          <a href=\"/\" target=\"_blank\" className=\"link\">linkedin</a>\r\n          <br/>\r\n          <a href=\"/\" target=\"_blank\" className=\"link\">resume</a>\r\n        </div>\r\n        <div className=\"right\">\r\n          <a href=\"/\" target=\"_blank\" className=\"link\">github</a>\r\n          <br/>\r\n          <a href=\"/\" target=\"_blank\" className=\"link\">email</a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Contact;\r\n",["277","278"],"C:\\Users\\Lina\\Downloads\\3D-O\\frontend\\src\\pages\\learn.js",[],"C:\\Users\\Lina\\Downloads\\3D-O\\frontend\\src\\pages\\browse.js",[],["279","280"],"C:\\Users\\Lina\\Downloads\\3D-O\\frontend\\src\\pages\\gallery.js",[],["281","282"],"C:\\Users\\Lina\\Downloads\\3D-O\\frontend\\src\\pages\\create.js",[],["283","284"],"C:\\Users\\Lina\\Downloads\\3D-O\\frontend\\src\\pages\\create-vase.js",["285","286","287","288","289","290"],"import React, {useEffect} from \"react\";\r\n\r\nimport {\r\n  NavBtn,\r\n  NavBtnLink\r\n} from '../components/Navbar/NavbarElements';\r\nimport { Canvas} from \"react-three-fiber\";\r\nimport Vase from \"../components/Vase\"\r\nimport './create-vase.css'\r\nimport { Slider, Rail, Handles, Tracks, Ticks } from \"react-compound-slider\";\r\nimport SwitchSelector from \"react-switch-selector\";\r\nimport { observer } from \"mobx-react\";\r\nimport { useStores } from \"../models/RootStoreContext\"\r\n\r\nconst CreateVase = () => {\r\n\r\n  const { vaseStore, coloringFormStore} = useStores();\r\n  coloringFormStore.setModel(\"vase\")\r\n\r\n  const sliderStyle = {  // Give the slider some width\r\n    position: 'relative',\r\n    width: '100%',\r\n    height: 15,\r\n    // border: '1px solid steelblue',\r\n  }\r\n  \r\n  const railStyle = {\r\n    position: 'absolute',\r\n    width: '100%',\r\n    height: 9,\r\n    // marginTop: 35,\r\n    borderRadius: 5,\r\n    backgroundColor: 'pink',\r\n  }\r\n  \r\n  function Handle({\r\n    handle: { id, value, percent },\r\n    getHandleProps\r\n  }) {\r\n    return (\r\n      <div className = \"straw\"\r\n        style={{\r\n          left: `${percent}%`,\r\n          position: 'absolute',\r\n          marginLeft: -15,\r\n          marginTop: -20,\r\n          zIndex: 2,\r\n          textAlign: 'right',\r\n          cursor: 'pointer',\r\n        }}\r\n        {...getHandleProps(id)}\r\n      >\r\n        <div style={{ fontFamily: 'Arial', fontSize: 16, marginTop: 15, marginLeft: 5, position:'absolute', zIndex: 3, color: \"#fff\"}}>\r\n          {value}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n  \r\n  function MultiHandle({\r\n    handle: { id, value, percent },\r\n    getHandleProps\r\n  }) {\r\n    if (id == \"$$-0\" || id == \"$$-4\"){\r\n      return (\r\n        <div className = \"straw\"\r\n          style={{\r\n            left: `${percent}%`,\r\n            position: 'absolute',\r\n            marginLeft: -15,\r\n            marginTop: -20,\r\n            zIndex: 2,\r\n            textAlign: 'right',\r\n            cursor: 'pointer',\r\n          }}\r\n        >\r\n          <div style={{ fontFamily: 'Arial', fontSize: 16, marginTop: 15, marginLeft: 5, position:'absolute', zIndex: 3, color: \"#fff\"}}>\r\n            {value}\r\n          </div>\r\n        </div>\r\n      )\r\n    } else {\r\n      return (\r\n        <div className = \"straw\"\r\n          style={{\r\n            left: `${percent}%`,\r\n            position: 'absolute',\r\n            marginLeft: -15,\r\n            marginTop: -20,\r\n            zIndex: 3,\r\n            textAlign: 'right',\r\n            cursor: 'pointer',\r\n          }}\r\n          {...getHandleProps(id)}\r\n        >\r\n          <div style={{ fontFamily: 'Arial', fontSize: 16, marginTop: 15, marginLeft: 5, position:'absolute', zIndex: 4, color: \"#fff\"}}>\r\n            {value}\r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n  \r\n  const sliderHeight = <Slider rootStyle={sliderStyle} domain={[10, 100]} step={1} mode={2} values={[vaseStore.height]} onUpdate={(val) => vaseStore.update_height(val[0])} >\r\n    <Rail>\r\n      {({ getRailProps }) => (\r\n        <div style={railStyle} {...getRailProps()} />\r\n      )}\r\n    </Rail>\r\n    <Handles>\r\n      {({ handles, getHandleProps }) => (\r\n        <div className=\"slider-handles\">\r\n          {handles.map(handle => (\r\n            <Handle\r\n              key={handle.id}\r\n              handle={handle}\r\n              getHandleProps={getHandleProps}\r\n            />\r\n          ))}\r\n        </div>\r\n      )}\r\n    </Handles>\r\n  </Slider>\r\n  \r\n  const slider_dtop = <Slider rootStyle={sliderStyle} domain={[1, 100]} step={1} mode={2} values={[vaseStore.dtop]} onUpdate={(val) => vaseStore.update_dtop(val[0])} >\r\n    <Rail>\r\n      {({ getRailProps }) => (\r\n        <div style={railStyle} {...getRailProps()} />\r\n      )}\r\n    </Rail>\r\n    <Handles>\r\n      {({ handles, getHandleProps }) => (\r\n        <div className=\"slider-handles\">\r\n          {handles.map(handle => (\r\n            <Handle\r\n              key={handle.id}\r\n              handle={handle}\r\n              getHandleProps={getHandleProps}\r\n            />\r\n          ))}\r\n        </div>\r\n      )}\r\n    </Handles>\r\n  </Slider>\r\n  \r\n  const slider_d3 = <Slider rootStyle={sliderStyle} domain={[1, 100]} step={1} mode={2} values={[vaseStore.d3]} onUpdate={(val) => vaseStore.update_d3(val[0])} >\r\n    <Rail>\r\n    {({ getRailProps }) => (\r\n      <div style={railStyle} {...getRailProps()} />\r\n    )}\r\n    </Rail>\r\n    <Handles>\r\n      {({ handles, getHandleProps }) => (\r\n        <div className=\"slider-handles\">\r\n          {handles.map(handle => (\r\n            <Handle\r\n              key={handle.id}\r\n              handle={handle}\r\n              getHandleProps={getHandleProps}\r\n            />\r\n          ))}\r\n        </div>\r\n      )}\r\n    </Handles>\r\n  </Slider>\r\n  \r\n  const slider_d2 = <Slider rootStyle={sliderStyle} domain={[1, 100]} step={1} mode={2} values={[vaseStore.d2]} onUpdate={(val) => vaseStore.update_d2(val[0])} >\r\n    <Rail>\r\n      {({ getRailProps }) => (\r\n        <div style={railStyle} {...getRailProps()} />\r\n      )}\r\n    </Rail>\r\n    <Handles>\r\n      {({ handles, getHandleProps }) => (\r\n        <div className=\"slider-handles\">\r\n          {handles.map(handle => (\r\n            <Handle\r\n              key={handle.id}\r\n              handle={handle}\r\n              getHandleProps={getHandleProps}\r\n            />\r\n          ))}\r\n        </div>\r\n      )}\r\n    </Handles>\r\n  </Slider>\r\n  \r\n  const slider_d1 = <Slider rootStyle={sliderStyle} domain={[1, 100]} step={1} mode={2} values={[vaseStore.d1]} onUpdate={(val) => vaseStore.update_d1(val[0])} >\r\n    <Rail>\r\n      {({ getRailProps }) => (\r\n        <div style={railStyle} {...getRailProps()} />\r\n      )}\r\n    </Rail>\r\n    <Handles>\r\n      {({ handles, getHandleProps }) => (\r\n        <div className=\"slider-handles\">\r\n          {handles.map(handle => (\r\n            <Handle\r\n              key={handle.id}\r\n              handle={handle}\r\n              getHandleProps={getHandleProps}\r\n            />\r\n          ))}\r\n        </div>\r\n      )}\r\n    </Handles>\r\n  </Slider>\r\n  \r\n  const slider_dbottom = <Slider rootStyle={sliderStyle} domain={[1, 100]} step={1} mode={2} values={[vaseStore.dbottom]} onUpdate={(val) => vaseStore.update_dbottom(val[0])} >\r\n    <Rail>\r\n      {({ getRailProps }) => (\r\n        <div style={railStyle} {...getRailProps()} />\r\n      )}\r\n    </Rail>\r\n    <Handles>\r\n      {({ handles, getHandleProps }) => (\r\n        <div className=\"slider-handles\">\r\n          {handles.map(handle => (\r\n            <Handle\r\n              key={handle.id}\r\n              handle={handle}\r\n              getHandleProps={getHandleProps}\r\n            />\r\n          ))}\r\n        </div>\r\n      )}\r\n    </Handles>\r\n  </Slider>\r\n  \r\n  const dSlider = <Slider\r\n  rootStyle={sliderStyle}\r\n  domain={[0, 100]}\r\n  mode={2}\r\n  values={[0, vaseStore.d1_h, vaseStore.d2_h, vaseStore.d3_h, 100] /* three values = three handles */}\r\n  onUpdate={(val)=>vaseStore.update_d_heights(val)}\r\n  step={5}\r\n  >\r\n  <div style={railStyle} />\r\n  <Handles>\r\n    {({ handles, getHandleProps }) => (\r\n      <div className=\"slider-handles\">\r\n        {handles.map(handle => (\r\n          <MultiHandle\r\n            key={handle.id}\r\n            handle={handle}\r\n            getHandleProps={getHandleProps}\r\n          />\r\n        ))}\r\n      </div>\r\n    )}\r\n  </Handles>\r\n  </Slider>\r\n  \r\n  const options = [\r\n    {\r\n        label: \"y\",\r\n        value: true,\r\n        selectedBackgroundColor: \"#E28988\",\r\n    },  {\r\n        label: \"n\",\r\n        value: false,\r\n        selectedBackgroundColor: \"#E28988\"\r\n    }\r\n  ];\r\n  \r\n  const unitOptions = [\r\n    {\r\n        label: \"cm\",\r\n        value: true,\r\n        selectedBackgroundColor: \"#E28988\",\r\n    },  {\r\n        label: \"in\",\r\n        value: false,\r\n        selectedBackgroundColor: \"#E28988\"\r\n    }\r\n  ];\r\n  \r\n  const top_rim_switch = <div className=\"switch\"  style={{width: 100, height: 50}}>\r\n      <SwitchSelector\r\n          onChange={(val) => vaseStore.update_top_rim(val)}\r\n          options={options}\r\n          initialSelectedIndex={vaseStore.top_rim ? 0 : 1}\r\n          backgroundColor={\"#FFE7E5\"}\r\n          fontColor={\"#D75A58\"}\r\n          optionBorderRadius={30}\r\n      />\r\n  </div>\r\n  \r\n  const bottom_rim_switch = <div className=\"switch\"  style={{width: 100, height: 50}}>\r\n      <SwitchSelector\r\n          onChange={(val) => vaseStore.update_bottom_rim(val)}\r\n          options={options}\r\n          initialSelectedIndex={vaseStore.bottom_rim ? 0 : 1}\r\n          backgroundColor={\"#FFE7E5\"}\r\n          fontColor={\"#D75A58\"}\r\n          optionBorderRadius={30}\r\n      />\r\n  </div>\r\n  \r\n  const bottom_disk_switch = <div className=\"switch\"  style={{width: 100, height: 50}}>\r\n      <SwitchSelector\r\n          onChange={(val) => vaseStore.update_bottom_disk(val)}\r\n          options={options}\r\n          initialSelectedIndex={vaseStore.bottom_disk ? 0 : 1}\r\n          backgroundColor={\"#FFE7E5\"}\r\n          fontColor={\"#D75A58\"}\r\n          optionBorderRadius={30}\r\n      />\r\n  </div>\r\n  \r\n  const units_switch = <div className=\"switch\" style={{width: 100, height: 50}}>\r\n      <SwitchSelector\r\n          onChange={(val) => vaseStore.update_units(val)}\r\n          options={unitOptions}\r\n          initialSelectedIndex={vaseStore.units ? 0 : 1}\r\n          backgroundColor={\"#FFE7E5\"}\r\n          fontColor={\"#D75A58\"}\r\n          optionBorderRadius={30}\r\n      />\r\n  </div>\r\n\r\n  return (\r\n    <>\r\n      <div className=\"container\" style={{background: '#FFE7E5', display: 'flex', flexDirection:'row', width: 'auto', height: 'auto'}}>\r\n        <div className=\"containerLeft\" style={{background: '#FFE7E5', width: '57%', height: 'auto',float:'left'}}>\r\n          <Canvas camera={{position:[0, 0, 120], fov:30, aspect: 800/600, near: 0.1,far: 1000}} style={{background: \"pink\", height: '80%', borderRadius:30, marginTop:'1%', marginLeft:'1%',width:'99%'}}>\r\n            {/* <ambientLight intensity={0} /> */}\r\n            <spotLight position={[-275, 150, 90]} intensity = {1.3}/>\r\n            <spotLight position={[100, 25, 90]} intensity = {1.3}/>\r\n            <spotLight position={[-150, -150, 110]} intensity = {0.6} />\r\n            <spotLight position={[150, -150, 110]} intensity={0.6} />\r\n            <spotLight position={[-10, 0, 25]} intensity={0.6} />\r\n             {/* <spotLight position={[1, 10, 10]} angle={0.15} penumbra={1} /> */}\r\n            {/* <pointLight position={[-10, -10, -10]} /> */}\r\n            <Vase vase={vaseStore} />\r\n          </Canvas>\r\n          <div className=\"containerCaption\">\r\n            <br/>\r\n            <a>Press <span>x</span> , <span>y</span> , and <span>z</span> to rotate the object ,<br/><span>q</span> and <span>w</span> to zoom in and out , <br/>and <span>space</span> to reset view to default . </a>\r\n          </div>\r\n        </div>\r\n        <div className=\"containerRight\" style={{background: '#FFE7E5', width: '43%', height: '100%', overflow: 'visible', float:'right'}}>\r\n          <br />\r\n          <p className=\"textSwitch\">units</p>\r\n          {units_switch}\r\n          <div>\r\n            <div style={{background: '#FFE7E5', width: '40.5%', float: 'left', marginBottom:30, marginLeft:25, marginTop:15}}>\r\n              <p className=\"text\">height</p>\r\n              {sliderHeight}\r\n              <p className=\"text\">2nd diameter</p>\r\n              {slider_d3}\r\n              <p className=\"text\">4th diameter</p>\r\n              {slider_d1}\r\n            </div>\r\n            <div style={{background: '#FFE7E5', width: '40.5%', float: 'right', marginBottom:30, marginRight:30, marginTop:15}}>\r\n              <p className=\"text\">top diameter</p>\r\n              {slider_dtop}\r\n              <p className=\"text\">3rd diameter</p>\r\n              {slider_d2}\r\n              <p className=\"text\">bottom diameter</p>\r\n              {slider_dbottom}\r\n            </div>\r\n          </div>\r\n          <p className=\"text\">diameter heights ( % )</p>\r\n          <div style={{width:'88%', marginLeft:'5%'}}>\r\n            {dSlider}\r\n          </div>\r\n          <div style={{float: 'left', width: '33.3%', overflow:'visible', marginTop:25, marginBottom:10}}>\r\n            <p className=\"textSwitch\">top rim</p>\r\n            {top_rim_switch}\r\n          </div>\r\n          <div style={{float: 'left', width: '33.3%', overflow:'visible', marginTop:25, marginBottom:10}}>\r\n            <p className=\"textSwitch\">bottom rim</p>\r\n            {bottom_rim_switch}\r\n          </div>\r\n          <div style={{float: 'right', width: '33.4%', overflow:'visible', marginTop:25, marginBottom:10}}>\r\n            <p className=\"textSwitch\">bottom cover</p>\r\n            {bottom_disk_switch}\r\n          </div>\r\n          <div style={{color:'#FFE7E5', marginTop: -10}}>.</div>\r\n          <div className=\"switch\" style={{width: 80, marginBottom:35}}>\r\n            <NavBtn>\r\n              <NavBtnLink style={{background: \"#D14240\"}} to='/colouring'>\r\n                <p className = \"buttonText\">done</p>\r\n              </NavBtnLink>\r\n            </NavBtn>\r\n          </div>\r\n        </div>\r\n      </div>\r\n  </>  \r\n  );\r\n};\r\n\r\nexport default observer(CreateVase);","C:\\Users\\Lina\\Downloads\\3D-O\\frontend\\src\\pages\\create-basket.js",["291","292","293","294"],"import React, {useEffect} from \"react\";\r\n\r\nimport {\r\n  NavBtn,\r\n  NavBtnLink\r\n} from '../components/Navbar/NavbarElements';\r\nimport { Canvas} from \"react-three-fiber\";\r\nimport Basket from \"../components/Basket\"\r\nimport './create-vase.css'\r\nimport { Slider, Rail, Handles, Tracks, Ticks } from \"react-compound-slider\";\r\nimport SwitchSelector from \"react-switch-selector\";\r\nimport { observer } from \"mobx-react\";\r\nimport { useStores } from \"../models/RootStoreContext\"\r\n\r\nconst CreateBasket = () => {\r\n\r\n  const { basketStore, coloringFormStore} = useStores();\r\n  coloringFormStore.setModel(\"basket\")\r\n\r\n  const options = [\r\n    {\r\n        label: \"y\",\r\n        value: true,\r\n        selectedBackgroundColor: \"#E28988\",\r\n    },  {\r\n        label: \"n\",\r\n        value: false,\r\n        selectedBackgroundColor: \"#E28988\"\r\n    }\r\n  ];\r\n  \r\n  const unitOptions = [\r\n    {\r\n        label: \"cm\",\r\n        value: true,\r\n        selectedBackgroundColor: \"#E28988\",\r\n    },  {\r\n        label: \"in\",\r\n        value: false,\r\n        selectedBackgroundColor: \"#E28988\"\r\n    }\r\n  ];\r\n\r\n  const sliderStyle = {  // Give the slider some width\r\n    position: 'relative',\r\n    width: '100%',\r\n    height: 15,\r\n    // border: '1px solid steelblue',\r\n  }\r\n  \r\n  const railStyle = {\r\n    position: 'absolute',\r\n    width: '100%',\r\n    height: 9,\r\n    // marginTop: 35,\r\n    borderRadius: 5,\r\n    backgroundColor: 'pink',\r\n  }\r\n  \r\n  function Handle({\r\n    handle: { id, value, percent },\r\n    getHandleProps\r\n  }) {\r\n    return (\r\n      <div className = \"straw\"\r\n        style={{\r\n          left: `${percent}%`,\r\n          position: 'absolute',\r\n          marginLeft: -15,\r\n          marginTop: -20,\r\n          zIndex: 2,\r\n          textAlign: 'right',\r\n          cursor: 'pointer',\r\n        }}\r\n        {...getHandleProps(id)}\r\n      >\r\n        <div style={{ fontFamily: 'Arial', fontSize: 16, marginTop: 15, marginLeft: 5, position:'absolute', zIndex: 3, color: \"#fff\"}}>\r\n          {value}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n  \r\n  const sliderHeight = <Slider rootStyle={sliderStyle} domain={[10, 100]} step={1} mode={2} values={[basketStore.height]} onUpdate={(val) => basketStore.update_height(val[0])} >\r\n    <Rail>\r\n      {({ getRailProps }) => (\r\n        <div style={railStyle} {...getRailProps()} />\r\n      )}\r\n    </Rail>\r\n    <Handles>\r\n      {({ handles, getHandleProps }) => (\r\n        <div className=\"slider-handles\">\r\n          {handles.map(handle => (\r\n            <Handle\r\n              key={handle.id}\r\n              handle={handle}\r\n              getHandleProps={getHandleProps}\r\n            />\r\n          ))}\r\n        </div>\r\n      )}\r\n    </Handles>\r\n  </Slider>\r\n  \r\n  const slider_diameter = <Slider rootStyle={sliderStyle} domain={[1, 100]} step={1} mode={2} values={[basketStore.diameter]} onUpdate={(val) => basketStore.update_diameter(val[0])} >\r\n    <Rail>\r\n      {({ getRailProps }) => (\r\n        <div style={railStyle} {...getRailProps()} />\r\n      )}\r\n    </Rail>\r\n    <Handles>\r\n      {({ handles, getHandleProps }) => (\r\n        <div className=\"slider-handles\">\r\n          {handles.map(handle => (\r\n            <Handle\r\n              key={handle.id}\r\n              handle={handle}\r\n              getHandleProps={getHandleProps}\r\n            />\r\n          ))}\r\n        </div>\r\n      )}\r\n    </Handles>\r\n  </Slider>\r\n\r\n  const slider_dbottom = <Slider rootStyle={sliderStyle} domain={[1, 100]} step={1} mode={2} values={[basketStore.dbottom]} onUpdate={(val) => basketStore.update_dbottom(val[0])} >\r\n  <Rail>\r\n    {({ getRailProps }) => (\r\n      <div style={railStyle} {...getRailProps()} />\r\n    )}\r\n  </Rail>\r\n  <Handles>\r\n    {({ handles, getHandleProps }) => (\r\n      <div className=\"slider-handles\">\r\n        {handles.map(handle => (\r\n          <Handle\r\n            key={handle.id}\r\n            handle={handle}\r\n            getHandleProps={getHandleProps}\r\n          />\r\n        ))}\r\n      </div>\r\n    )}\r\n  </Handles>\r\n  </Slider>\r\n\r\n  const slider_dtop = <Slider rootStyle={sliderStyle} domain={[1, 100]} step={1} mode={2} values={[basketStore.dtop]} onUpdate={(val) => basketStore.update_dtop(val[0])} >\r\n  <Rail>\r\n    {({ getRailProps }) => (\r\n      <div style={railStyle} {...getRailProps()} />\r\n    )}\r\n  </Rail>\r\n  <Handles>\r\n    {({ handles, getHandleProps }) => (\r\n      <div className=\"slider-handles\">\r\n        {handles.map(handle => (\r\n          <Handle\r\n            key={handle.id}\r\n            handle={handle}\r\n            getHandleProps={getHandleProps}\r\n          />\r\n        ))}\r\n      </div>\r\n    )}\r\n  </Handles>\r\n  </Slider>\r\n  \r\n  const top_rim_switch = <div className=\"switch\"  style={{width: 100, height: 50}}>\r\n      <SwitchSelector\r\n          onChange={(val) => basketStore.update_top_rim(val)}\r\n          options={options}\r\n          initialSelectedIndex={basketStore.top_rim ? 0 : 1}\r\n          backgroundColor={\"#FFE7E5\"}\r\n          fontColor={\"#D75A58\"}\r\n          optionBorderRadius={30}\r\n      />\r\n  </div>\r\n  \r\n  const bottom_rim_switch = <div className=\"switch\"  style={{width: 100, height: 50}}>\r\n      <SwitchSelector\r\n          onChange={(val) => basketStore.update_bottom_rim(val)}\r\n          options={options}\r\n          initialSelectedIndex={basketStore.bottom_rim ? 0 : 1}\r\n          backgroundColor={\"#FFE7E5\"}\r\n          fontColor={\"#D75A58\"}\r\n          optionBorderRadius={30}\r\n      />\r\n  </div>\r\n  \r\n  const lid_switch = <div className=\"switch\"  style={{width: 100, height: 50}}>\r\n      <SwitchSelector\r\n          onChange={(val) => basketStore.update_lid(val)}\r\n          options={options}\r\n          initialSelectedIndex={basketStore.lid ? 0 : 1}\r\n          backgroundColor={\"#FFE7E5\"}\r\n          fontColor={\"#D75A58\"}\r\n          optionBorderRadius={30}\r\n      />\r\n  </div>\r\n  \r\n  const bottom_switch = <div className=\"switch\"  style={{width: 100, height: 50}}>\r\n  <SwitchSelector\r\n      onChange={(val) => basketStore.update_curved_bottom(val)}\r\n      options={options}\r\n      initialSelectedIndex={basketStore.curved_bottom ? 0 : 1}\r\n      backgroundColor={\"#FFE7E5\"}\r\n      fontColor={\"#D75A58\"}\r\n      optionBorderRadius={30}\r\n  />\r\n</div>\r\n\r\n  const top_handle_switch = <div className=\"switch\"  style={{width: 100, height: 50}}>\r\n  <SwitchSelector\r\n      onChange={(val) => basketStore.update_top_handle(val)}\r\n      options={options}\r\n      initialSelectedIndex={basketStore.top_handle ? 0 : 1}\r\n      backgroundColor={\"#FFE7E5\"}\r\n      fontColor={\"#D75A58\"}\r\n      optionBorderRadius={30}\r\n  />\r\n  </div>\r\n\r\n  const side_handles_switch = <div className=\"switch\"  style={{width: 100, height: 50}}>\r\n  <SwitchSelector\r\n      onChange={(val) => basketStore.update_side_handles(val)}\r\n      options={options}\r\n      initialSelectedIndex={basketStore.side_handles ? 0 : 1}\r\n      backgroundColor={\"#FFE7E5\"}\r\n      fontColor={\"#D75A58\"}\r\n      optionBorderRadius={30}\r\n  />\r\n  </div>\r\n  \r\n  const units_switch = <div className=\"switch\" style={{width: 100, height: 50}}>\r\n      <SwitchSelector\r\n          onChange={(val) => basketStore.update_units(val)}\r\n          options={unitOptions}\r\n          initialSelectedIndex={basketStore.units ? 0 : 1}\r\n          backgroundColor={\"#FFE7E5\"}\r\n          fontColor={\"#D75A58\"}\r\n          optionBorderRadius={30}\r\n      />\r\n  </div>\r\n\r\n  return (\r\n    <>\r\n      <div className=\"container\" style={{background: '#FFE7E5', display: 'flex', flexDirection:'row', width: 'auto', height: '690px'}}>\r\n        <div className=\"containerLeft\" style={{background: '#FFE7E5', width: '57%', height: 'auto',float:'left'}}>\r\n          <Canvas camera={{position:[0, 0, 100], fov:30, aspect: 800/600, near: 0.1,far: 1000}} style={{background: \"pink\", height: '80%', borderRadius:30, marginTop:'1%', marginLeft:'1%',width:'99%'}}>\r\n            <spotLight position={[-275, 150, 90]} intensity = {1.5}/>\r\n            <spotLight position={[10, 25, 90]} intensity = {1.3}/>\r\n            <spotLight position={[-150, -150, 110]} intensity = {0.6} />\r\n            <spotLight position={[150, -150, 110]} intensity={0.6} />\r\n            <spotLight position={[-10, 0, 25]} intensity={0.6} />\r\n            <Basket basketStore={basketStore} />\r\n          </Canvas>\r\n          <div className=\"containerCaption\">\r\n            <br/>\r\n            <a>Press <span>x</span> , <span>y</span> , and <span>z</span> to rotate the object ,<br/><span>q</span> and <span>w</span> to zoom in and out , <br/>and <span>space</span> to reset view to default . </a>\r\n          </div>\r\n        </div>\r\n        <div className=\"containerRight\" style={{width: '43%', height: '100%', overflow: 'visible', float:'right'}}>\r\n          <br />\r\n          <p className=\"textSwitch\">units</p>\r\n          {units_switch}\r\n          <div>\r\n            <div style={{background: '#FFE7E5', width: '40.5%', float: 'left', marginBottom:30, marginLeft:25, marginTop:15}}>\r\n              <p className=\"text\">height</p>\r\n              {sliderHeight}\r\n              <p className=\"text\">top diameter</p>\r\n              {slider_dtop}\r\n            </div>\r\n            <div style={{background: '#FFE7E5', width: '40.5%', float: 'right', marginBottom:30, marginRight:30, marginTop:15}}>\r\n              <p className=\"text\">middle diameter</p>\r\n              {slider_diameter}\r\n              <p className=\"text\">bottom diameter</p>\r\n              {slider_dbottom}\r\n            </div>\r\n          </div>\r\n          <div style={{float: 'left', width: '33.3%', overflow:'visible', marginTop:25, marginBottom:10}}>\r\n            <p className=\"textSwitch\">top rim</p>\r\n            {top_rim_switch}\r\n          </div>\r\n          <div style={{float: 'left', width: '33.4%', overflow:'visible', marginTop:25, marginBottom:10}}>\r\n            <p className=\"textSwitch\">curved bottom</p>\r\n            {bottom_switch}\r\n          </div>\r\n          <div style={{float: 'left', width: '33.3%', overflow:'visible', marginTop:25, marginBottom:10}}>\r\n            <p className=\"textSwitch\">bottom rim</p>\r\n            {bottom_rim_switch}\r\n          </div>\r\n          <div style={{float: 'left', width: '33.3%', overflow:'visible', marginTop:25, marginBottom:10}}>\r\n            <p className=\"textSwitch\">top handle</p>\r\n            {top_handle_switch}\r\n          </div>\r\n          <div style={{float: 'left', width: '33.4%', overflow:'visible', marginTop:25, marginBottom:10}}>\r\n            <p className=\"textSwitch\">lid</p>\r\n            {lid_switch}\r\n          </div>\r\n          <div style={{float: 'left', width: '33.3%', overflow:'visible', marginTop:25, marginBottom:10}}>\r\n            <p className=\"textSwitch\">side handles</p>\r\n            {side_handles_switch}\r\n          </div>\r\n          <div className=\"done-basket\" style={{width: 80, marginBottom:35}}>\r\n            <NavBtn>\r\n              <NavBtnLink style={{background: \"#D14240\"}} to='/colouring'>\r\n                <p className = \"buttonText\">done</p>\r\n              </NavBtnLink>\r\n            </NavBtn>\r\n          </div>\r\n        </div>\r\n      </div>\r\n  </>  \r\n  );\r\n};\r\n\r\nexport default observer(CreateBasket);","C:\\Users\\Lina\\Downloads\\3D-O\\frontend\\src\\models\\VaseStore.js",["295","296","297"],"import { types } from \"mobx-state-tree\";\r\nimport * as THREE from \"three\";\r\nimport React from \"react\"\r\n\r\nfunction getCurvePointsNew(_pts, tension, numOfSegments) {\r\n\r\n    var res = [],    // clone array\r\n        x, y,           // our x,y coords\r\n        t1x, t2x, t1y, t2y, // tension vectors\r\n        c1, c2, c3, c4,     // cardinal points\r\n        st, t, i;       // steps based on num. of segments\r\n\r\n    const first_x = _pts[0]\r\n    const first_y = _pts[1]\r\n    const last_x = _pts[8]\r\n    const last_y = _pts[9]\r\n\r\n    _pts.unshift(first_y)\r\n    _pts.unshift(first_x)\r\n    _pts.push(last_x)\r\n    _pts.push(last_y)\r\n\r\n    for (i=2; i < (_pts.length - 4); i+=2) {\r\n        for (t=0; t <= numOfSegments; t++) {\r\n\r\n            // calc tension vectors\r\n            t1x = (_pts[i+2] - _pts[i-2]) * tension;\r\n            t2x = (_pts[i+4] - _pts[i]) * tension;\r\n\r\n            t1y = (_pts[i+3] - _pts[i-1]) * tension;\r\n            t2y = (_pts[i+5] - _pts[i+1]) * tension;\r\n\r\n            // calc step\r\n            st = t / numOfSegments;\r\n\r\n            // calc cardinals\r\n            c1 =   2 * Math.pow(st, 3)  - 3 * Math.pow(st, 2) + 1; \r\n            c2 = -(2 * Math.pow(st, 3)) + 3 * Math.pow(st, 2); \r\n            c3 =       Math.pow(st, 3)  - 2 * Math.pow(st, 2) + st; \r\n            c4 =       Math.pow(st, 3)  -     Math.pow(st, 2);\r\n\r\n            // calc x and y cords with common control vectors\r\n            x = c1 * _pts[i]    + c2 * _pts[i+2] + c3 * t1x + c4 * t2x;\r\n            y = c1 * _pts[i+1]  + c2 * _pts[i+3] + c3 * t1y + c4 * t2y;\r\n\r\n            //store points in array\r\n            res.push(x);\r\n            res.push(Math.max(y, 0.5));\r\n\r\n        }\r\n    }\r\n    return res;\r\n}\r\n\r\nfunction getCurvePoints(pts, tension, isClosed, numOfSegments) {\r\n\r\n    // use input value if provided, or use a default value   \r\n    tension = (typeof tension != 'undefined') ? tension : 0.5;\r\n    isClosed = isClosed ? isClosed : false;\r\n    numOfSegments = numOfSegments ? numOfSegments : 16;\r\n\r\n    var _pts = [], res = [],    // clone array\r\n        x, y,           // our x,y coords\r\n        t1x, t2x, t1y, t2y, // tension vectors\r\n        c1, c2, c3, c4,     // cardinal points\r\n        st, t, i;       // steps based on num. of segments\r\n\r\n    // clone array so we don't change the original\r\n    //\r\n    _pts = pts.slice(0);\r\n\r\n    // The algorithm require a previous and next point to the actual point array.\r\n    // Check if we will draw closed or open curve.\r\n    // If closed, copy end points to beginning and first points to end\r\n    // If open, duplicate first points to befinning, end points to end\r\n    if (isClosed) {\r\n        _pts.unshift(pts[pts.length - 1]);\r\n        _pts.unshift(pts[pts.length - 2]);\r\n        _pts.unshift(pts[pts.length - 1]);\r\n        _pts.unshift(pts[pts.length - 2]);\r\n        _pts.push(pts[0]);\r\n        _pts.push(pts[1]);\r\n    }\r\n    else {\r\n        _pts.unshift(pts[1]);   //copy 1. point and insert at beginning\r\n        _pts.unshift(pts[0]);\r\n        _pts.push(pts[pts.length - 2]); //copy last point and append\r\n        _pts.push(pts[pts.length - 1]);\r\n    }\r\n\r\n    // ok, lets start..\r\n\r\n    // 1. loop goes through point array\r\n    // 2. loop goes through each segment between the 2 pts + 1e point before and after\r\n    for (i=2; i < (_pts.length - 4); i+=2) {\r\n        for (t=0; t <= numOfSegments; t++) {\r\n\r\n            // calc tension vectors\r\n            t1x = (_pts[i+2] - _pts[i-2]) * tension;\r\n            t2x = (_pts[i+4] - _pts[i]) * tension;\r\n\r\n            t1y = (_pts[i+3] - _pts[i-1]) * tension;\r\n            t2y = (_pts[i+5] - _pts[i+1]) * tension;\r\n\r\n            // calc step\r\n            st = t / numOfSegments;\r\n\r\n            // calc cardinals\r\n            c1 =   2 * Math.pow(st, 3)  - 3 * Math.pow(st, 2) + 1; \r\n            c2 = -(2 * Math.pow(st, 3)) + 3 * Math.pow(st, 2); \r\n            c3 =       Math.pow(st, 3)  - 2 * Math.pow(st, 2) + st; \r\n            c4 =       Math.pow(st, 3)  -     Math.pow(st, 2);\r\n\r\n            // calc x and y cords with common control vectors\r\n            x = c1 * _pts[i]    + c2 * _pts[i+2] + c3 * t1x + c4 * t2x;\r\n            y = c1 * _pts[i+1]  + c2 * _pts[i+3] + c3 * t1y + c4 * t2y;\r\n\r\n            //store points in array\r\n            res.push(x);\r\n            res.push(y);\r\n\r\n        }\r\n    }\r\n\r\n    return res;\r\n}\r\n\r\nconst VaseStore = types\r\n  .model(\"Vase\", {\r\n    cm: false,\r\n    dtop: 20,\r\n    d3: 10, \r\n    d2: 10, \r\n    d1: 35,\r\n    dbottom: 20, \r\n    dtop_h: 100, \r\n    d3_h: 90, \r\n    d2_h: 70, \r\n    d1_h: 50, \r\n    dbottom_h: 0, \r\n    height: 50,\r\n    top_rim: false, \r\n    bottom_rim: true, \r\n    bottom_disk: true, \r\n    scale_h: 36,\r\n    default_color: \"#FFFFFF\",\r\n    tot_rows_per_section: types.optional(types.array(types.number), [15,9,10,10,10]), // bottom to top \r\n    subsections: types.optional(types.array(types.array(types.number)),[[5,4],[3,2],[1],[0]]), \r\n    // vase has 4 sections, each may be made of 1+ drawing sections // bottom to top\r\n    // it's numbered like that so you can refer to the corresponding section in modelDimensions\r\n    textures: types.optional(types.array(types.string), []), // first idx = top, last idx = bottom of vase\r\n    modelDimensions: types.optional(types.array(types.array(types.number)), [[43, 10], [53, 10],[40,10],[28,9], [16,10], [24,5]]), // top to bottom \r\n  })\r\n  .actions(self => ({\r\n    update_top_rim(top_rim){\r\n        self.top_rim = top_rim\r\n    },\r\n    update_bottom_rim(bottom_rim){\r\n        self.bottom_rim = bottom_rim\r\n    },\r\n    update_bottom_disk(bottom_disk){\r\n        self.bottom_disk = bottom_disk\r\n    },\r\n    update_units(units){\r\n        self.cm = units\r\n    },\r\n    update_height(height){\r\n        self.height = height\r\n    }, \r\n    update_dtop(dtop){\r\n        self.dtop = dtop\r\n    }, \r\n    update_d3(d3){\r\n        self.d3 = d3\r\n    }, \r\n    update_d2(d2){\r\n        self.d2 = d2\r\n    }, \r\n    update_d1(d1){\r\n        self.d1 = d1\r\n    }, \r\n    update_dbottom(dbottom){\r\n        self.dbottom = dbottom\r\n    },\r\n    update_d_heights(vals){\r\n        self.d3_h = vals[3]\r\n        self.d2_h = vals[2]\r\n        self.d1_h = vals[1]\r\n    },\r\n    storePic(picData){\r\n        self.textures.push(picData)\r\n        // console.log(picData)\r\n    },\r\n    setDefaultColor(color){\r\n        self.default_color = color\r\n    },\r\n    getDimensions() {\r\n        self.maxWidth = 53 // un hard code\r\n        return self.modelDimensions\r\n      },\r\n    updateCurvedPts(broken=false){\r\n        const s_dtop_h = self.scale_h/2\r\n        const s_dbottom_h = -1 * s_dtop_h\r\n        const scale_factor = self.scale_h/self.height\r\n    \r\n        const s_dtop = self.dtop * scale_factor\r\n        const s_dbottom = self.dbottom * scale_factor\r\n    \r\n        const s_d1 = self.d1 * scale_factor\r\n        const s_d1_h = (self.d1_h/100) * self.scale_h - s_dtop_h\r\n    \r\n        const s_d2 = self.d2 * scale_factor\r\n        const s_d2_h = (self.d2_h/100) * self.scale_h - s_dtop_h\r\n    \r\n        const s_d3 = self.d3 * scale_factor\r\n        const s_d3_h = (self.d3_h/100) * self.scale_h - s_dtop_h\r\n\r\n        var myPoints = [s_dbottom_h,s_dbottom/2, s_d1_h,s_d1/2,s_d2_h,s_d2/2, s_d3_h,s_d3/2, s_dtop_h,s_dtop/2]; \r\n        var tension = 0.4\r\n        var numOfSegments = 6\r\n        let points = [];\r\n        const new_pts = getCurvePointsNew(myPoints, tension, numOfSegments)\r\n        for (let i=0; i<new_pts.length; i+=2){\r\n            const h = new_pts[i]\r\n            const r = new_pts[i+1]\r\n            points.push( new THREE.Vector2(r, h));\r\n        }\r\n        if (!broken) return points\r\n        else{\r\n            let section_pts = []\r\n            let broken_pts = []\r\n            let broken_pts_three = []\r\n            let lo = 0 \r\n            let hi = 2\r\n            while (hi+3 < new_pts.length){\r\n                if (new_pts[hi] == new_pts[hi+2] && new_pts[hi+1] == new_pts[hi+3]){\r\n                    const temp = new_pts.slice(lo,hi+2)\r\n                    section_pts.push(temp)\r\n                    lo = hi + 2\r\n                }\r\n                hi += 2\r\n            }\r\n            section_pts.push(new_pts.slice(lo,new_pts.length))\r\n            for (let i=0; i<4; i+=1){ //section_pts.length = 4\r\n                let curr_idx = 0\r\n                for (let j=0; j<self.subsections[i].length; j+=1){\r\n                    if (self.subsections[i].length > 1){\r\n                        // console.log(self.modelDimensions[self.subsections[i][j]][1])\r\n                        let slice_size = Math.round((self.modelDimensions[self.subsections[i][j]][1] / self.tot_rows_per_section[i]) * (section_pts[i].length/2))\r\n                        slice_size = slice_size * 2\r\n                        const slice = section_pts[i].slice(curr_idx,curr_idx + slice_size+2)\r\n                        curr_idx += slice_size\r\n                        broken_pts.push(slice)\r\n                    } \r\n                    else {\r\n                        broken_pts.push(section_pts[i])\r\n                    }\r\n                }\r\n            }\r\n            for(let j=0; j<broken_pts.length; j+= 1){\r\n                let temp = []\r\n                for(let k = 0; k < broken_pts[j].length; k += 2){\r\n                    const h = broken_pts[j][k]\r\n                    const r = broken_pts[j][k+1]\r\n                    temp.push( new THREE.Vector2(r, h));\r\n                }\r\n                broken_pts_three.push(temp)\r\n            }\r\n            \r\n            return broken_pts_three\r\n        }\r\n    }\r\n  }))\r\n  .views(self => ({\r\n  }));\r\n\r\nexport default VaseStore;\r\n\r\nconst VaseContext = React.createContext();\r\n\r\nexport const VaseProvider = ({ children, store }) => {\r\n    return (\r\n      <VaseContext.Provider value={store}>{children}</VaseContext.Provider>\r\n    );\r\n  };\r\n\r\nexport const useVaseStore = () => React.useContext(VaseContext);\r\n\r\nexport const withVaseStore = (Component) => (props) => {\r\n    return <Component {...props} store={useVaseStore()} />;\r\n  };","C:\\Users\\Lina\\Downloads\\3D-O\\frontend\\src\\components\\Vase\\index.js",["298","299","300","301","302"],"import React, { useRef, useState, useMemo, useEffect} from \"react\";\r\nimport {useFrame} from \"react-three-fiber\";\r\nimport { observer } from \"mobx-react\";\r\nimport * as THREE from \"three\";\r\nimport grid from \"../../assets/paper.PNG\";\r\n// import temp from \"../../assets/tempp.png\";\r\n\r\nconst Vase = (props) => {\r\n    const {vase} = props\r\n    const texture = useMemo(() => new THREE.TextureLoader().load(grid), []);\r\n    // texture.wrapS = THREE.MirroredRepeatWrapping;\r\n    // texture.wrapT = THREE.MirroredRepeatWrapping;\r\n    // texture.repeat.set(2, 2.6);\r\n\r\n    const s_dtop_h = vase.scale_h/2\r\n    const s_dbottom_h = -1 * s_dtop_h\r\n    const scale_factor = vase.scale_h/vase.height\r\n\r\n    const s_dtop = Math.max(1,vase.dtop * scale_factor)\r\n    const s_dbottom = Math.max(1,vase.dbottom * scale_factor)\r\n\r\n    const s_d1 = Math.max(1, vase.d1 * scale_factor)\r\n    const s_d1_h = (vase.d1_h/100) * vase.scale_h - s_dtop_h\r\n\r\n    const s_d2 = Math.max(1, vase.d2 * scale_factor)\r\n    const s_d2_h = (vase.d2_h/100) * vase.scale_h - s_dtop_h\r\n\r\n    const s_d3 = Math.max(1,vase.d3 * scale_factor)\r\n    const s_d3_h = (vase.d3_h/100) * vase.scale_h - s_dtop_h\r\n\r\n    let top_rim_mesh = <mesh/>\r\n    let bottom_rim_mesh = <mesh />\r\n    let bottom_disk_mesh = <mesh />\r\n\r\n    function getInputMarker(rad, height){\r\n        return (\r\n            <mesh position = {[0,height,0]}>\r\n                <cylinderGeometry args={[rad, rad, 0.25, 40, 1, true,0, Math.PI * 2]}/>\r\n                <meshPhongMaterial color=\"red\" />\r\n            </mesh>\r\n        )\r\n    }\r\n\r\n    const dtop_marker = vase.top_rim ? getInputMarker((s_dtop/2) + 0.6, s_dtop_h) : getInputMarker((s_dtop/2) + 0.1, s_dtop_h) \r\n    const dbottom_marker = vase.bottom_rim ? getInputMarker((s_dbottom/2) + 0.6, s_dbottom_h) : getInputMarker((s_dbottom/2) + 0.1, s_dbottom_h)\r\n    const d1_marker = getInputMarker((s_d1/2) + 0.1, s_d1_h)\r\n    const d2_marker = getInputMarker((s_d2/2) + 0.1, s_d2_h)\r\n    const d3_marker = getInputMarker((s_d3/2) + 0.1, s_d3_h)\r\n\r\n    if (vase.top_rim){\r\n        top_rim_mesh = <mesh position = {[0,s_dtop_h+0.1,0]} rotation = {[1.57,0,0]}> \r\n        <torusGeometry args={[(s_dtop/2)+0.1,0.4,10,50]}/>\r\n        <meshPhongMaterial color=\"#FF7E98\" />\r\n        </mesh>\r\n    }\r\n    if (vase.bottom_rim){\r\n        bottom_rim_mesh = <mesh position = {[0,s_dbottom_h-0.1,0]} rotation = {[1.57,0,0]}> \r\n        <torusGeometry args={[(s_dbottom/2)+0.1, 0.4, 10, 50]}/>\r\n        <meshPhongMaterial color=\"#FF7E98\" />\r\n        </mesh>\r\n    }\r\n\r\n    const points = vase.updateCurvedPts()\r\n\r\n    let [x_rot,changeXrot] = useState(0);\r\n    let [y_rot,changeYrot] = useState(0);\r\n    let [z_rot,changeZrot] = useState(0);\r\n    let [dist,changeDist] = useState(0);\r\n\r\n    if (vase.bottom_disk){\r\n        bottom_disk_mesh = <mesh position = {[0,s_dbottom_h,0]}>\r\n            <cylinderGeometry args={[s_dbottom/2, s_dbottom/2, 0.8, 32]}/>\r\n            <meshPhongMaterial  map={texture} />\r\n        </mesh>\r\n    }\r\n\r\n    const handleKeyDown = (event) => {\r\n        switch(event.key)\r\n        {\r\n            case \"x\":\r\n                    x_rot = x_rot + 0.1\r\n                    changeXrot(x_rot);\r\n                    break;\r\n            case \"y\": \r\n                    y_rot = y_rot + 0.1\r\n                    changeYrot(y_rot);\r\n                    break;\r\n            case \"z\": \r\n                    z_rot = z_rot + 0.1\r\n                    changeZrot(z_rot);\r\n                    break;\r\n            case \"w\": \r\n                    dist = Math.max(dist - 5,-550)\r\n                    changeDist(dist)\r\n                    break;\r\n            case \"q\": \r\n                    dist = Math.min(dist + 5,40)\r\n                    changeDist(dist)\r\n                    break;\r\n            case \" \": \r\n                    event.preventDefault()\r\n                    x_rot = 0\r\n                    y_rot = 0\r\n                    z_rot = 0 \r\n                    dist = 0\r\n                    changeXrot(x_rot)\r\n                    changeYrot(y_rot)\r\n                    changeZrot(z_rot)\r\n                    changeDist(dist)\r\n            default: \r\n                    break;\r\n        }\r\n    };\r\n    \r\n    React.useEffect(() => {\r\n        window.addEventListener('keydown', handleKeyDown);\r\n\r\n        // cleanup this component\r\n        return () => {\r\n            window.removeEventListener('keydown', handleKeyDown);\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        <group position={[0,0,dist]} rotation={[x_rot,y_rot,z_rot]}> \r\n            <mesh >\r\n                <latheGeometry args={[points, 30, 0, 2*Math.PI]}/>\r\n                <meshPhongMaterial map = {texture}  side={THREE.FrontSide} specular=\"#121212\" shininess = {26}/>\r\n            </mesh>\r\n            <mesh>\r\n                <latheGeometry args={[points, 30, 0, 2*Math.PI]}/>\r\n                <meshPhongMaterial map = {texture}  side = {THREE.BackSide} />\r\n            </mesh>\r\n            {vase.top_rim && top_rim_mesh}\r\n            {vase.bottom_rim && bottom_rim_mesh}\r\n            {vase.bottom_disk && bottom_disk_mesh}\r\n            {dbottom_marker}\r\n            {d1_marker}\r\n            {d2_marker}\r\n            {d3_marker}\r\n            {dtop_marker}\r\n        </group>\r\n    )\r\n  }\r\n\r\nexport default observer(Vase);",["303","304"],"C:\\Users\\Lina\\Downloads\\3D-O\\frontend\\src\\pages\\create-figurine.js",["305","306","307","308"],"import React, {useEffect} from \"react\";\r\n\r\nimport {\r\n  NavBtn,\r\n  NavBtnLink\r\n} from '../components/Navbar/NavbarElements';\r\nimport { Canvas} from \"react-three-fiber\";\r\nimport Figurine from \"../components/Figurine\"\r\nimport './create-vase.css'\r\nimport { Slider, Rail, Handles, Tracks, Ticks } from \"react-compound-slider\";\r\nimport SwitchSelector from \"react-switch-selector\";\r\nimport { observer } from \"mobx-react\";\r\nimport { useStores } from \"../models/RootStoreContext\"\r\n\r\n\r\nconst CreateFigurine = () => {\r\n\r\n  const { figStore, coloringFormStore} = useStores();\r\n  coloringFormStore.setModel(\"fig\")\r\n\r\n  const options = [\r\n    {\r\n        label: \"y\",\r\n        value: true,\r\n        selectedBackgroundColor: \"#E28988\",\r\n    },  {\r\n        label: \"n\",\r\n        value: false,\r\n        selectedBackgroundColor: \"#E28988\"\r\n    }\r\n  ];\r\n\r\n  const ears_options = [\r\n    {\r\n        label: \"◠ ◠\",\r\n        value: \"bear\",\r\n        selectedBackgroundColor: \"#E28988\",\r\n    },  {\r\n        label: \"〇 〇\",\r\n        value: \"sphere\",\r\n        selectedBackgroundColor: \"#E28988\"\r\n    },  {\r\n        label: \"∧ ∧\",\r\n        value: \"cat\",\r\n        selectedBackgroundColor: \"#E28988\"\r\n    },  {\r\n        label: \"∩ ∩\",\r\n        value: \"bunny\",\r\n        selectedBackgroundColor: \"#E28988\"\r\n    },\r\n  ];\r\n\r\n  const ears = [\"bear\", \"sphere\", \"cat\", \"bunny\"]\r\n  \r\n  const unitOptions = [\r\n    {\r\n        label: \"cm\",\r\n        value: true,\r\n        selectedBackgroundColor: \"#E28988\",\r\n    },  {\r\n        label: \"in\",\r\n        value: false,\r\n        selectedBackgroundColor: \"#E28988\"\r\n    }\r\n  ];\r\n\r\n  const sliderStyle = {  // Give the slider some width\r\n    position: 'relative',\r\n    width: '100%',\r\n    height: 15,\r\n    // border: '1px solid steelblue',\r\n  }\r\n  \r\n  const railStyle = {\r\n    position: 'absolute',\r\n    width: '100%',\r\n    height: 9,\r\n    // marginTop: 35,\r\n    borderRadius: 5,\r\n    backgroundColor: 'pink',\r\n  }\r\n  \r\n  function Handle({\r\n    handle: { id, value, percent },\r\n    getHandleProps\r\n  }) {\r\n    return (\r\n      <div className = \"straw\"\r\n        style={{\r\n          left: `${percent}%`,\r\n          position: 'absolute',\r\n          marginLeft: -15,\r\n          marginTop: -20,\r\n          zIndex: 2,\r\n          textAlign: 'right',\r\n          cursor: 'pointer',\r\n        }}\r\n        {...getHandleProps(id)}\r\n      >\r\n        <div style={{ fontFamily: 'Arial', fontSize: 16, marginTop: 15, marginLeft: 5, position:'absolute', zIndex: 3, color: \"#fff\"}}>\r\n          {value}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n    \r\n  const slider_diameter = <Slider rootStyle={sliderStyle} domain={[1, 50]} step={1} mode={2} values={[figStore.diameter]} onUpdate={(val) => figStore.update_diameter(val[0])} >\r\n    <Rail>\r\n      {({ getRailProps }) => (\r\n        <div style={railStyle} {...getRailProps()} />\r\n      )}\r\n    </Rail>\r\n    <Handles>\r\n      {({ handles, getHandleProps }) => (\r\n        <div className=\"slider-handles\">\r\n          {handles.map(handle => (\r\n            <Handle\r\n              key={handle.id}\r\n              handle={handle}\r\n              getHandleProps={getHandleProps}\r\n            />\r\n          ))}\r\n        </div>\r\n      )}\r\n    </Handles>\r\n  </Slider>\r\n  \r\n\r\n  const arms_switch = <div className=\"switch\"  style={{width: 100, height: 50}}>\r\n  <SwitchSelector\r\n      onChange={(val) => figStore.update_arms(val)}\r\n      options={options}\r\n      initialSelectedIndex={figStore.arms ? 0 : 1}\r\n      backgroundColor={\"#FFE7E5\"}\r\n      fontColor={\"#D75A58\"}\r\n      optionBorderRadius={30}\r\n  />\r\n  </div>\r\n\r\n  \r\nconst ears_switch = <div className=\"switch\"  style={{width: 360, height: 50}}>\r\n<SwitchSelector\r\n    onChange={(val) => figStore.update_ears(val)}\r\n    options={ears_options}\r\n    initialSelectedIndex={ears.indexOf(`${figStore.ears}`)}\r\n    backgroundColor={\"#FFE7E5\"}\r\n    fontColor={\"#D75A58\"}\r\n    optionBorderRadius={30}\r\n    fontSize={20}\r\n/>\r\n</div>\r\n  \r\n  const units_switch = <div className=\"switch\" style={{width: 100, height: 50}}>\r\n      <SwitchSelector\r\n          onChange={(val) => figStore.update_units(val)}\r\n          options={unitOptions}\r\n          initialSelectedIndex={figStore.units ? 0 : 1}\r\n          backgroundColor={\"#FFE7E5\"}\r\n          fontColor={\"#D75A58\"}\r\n          optionBorderRadius={30}\r\n      />\r\n  </div>\r\n\r\n  return (\r\n    <>\r\n      <div className=\"container\" style={{background: '#FFE7E5', display: 'flex', flexDirection:'row', width: 'auto', height: 'auto'}}>\r\n        <div className=\"containerLeft\" style={{background: '#FFE7E5', width: '57%', height: 'auto',float:'left'}}>\r\n          <Canvas camera={{position:[0, 0, 80], fov:30, aspect: 800/600, near: 0.1,far: 1000}} style={{background: \"pink\", height: '470px', borderRadius:30, marginTop:'1%', marginLeft:'1%',width:'99%'}}>\r\n            <spotLight position={[-275, 150, 90]} intensity = {1.5}/>\r\n            <spotLight position={[10, 25, 90]} intensity = {1.3}/>\r\n            <spotLight position={[-150, -150, 110]} intensity = {0.6} />\r\n            <spotLight position={[150, -150, 110]} intensity={0.6} />\r\n            <spotLight position={[-10, 0, 25]} intensity={0.6} />\r\n            <Figurine figStore={figStore} />\r\n          </Canvas>\r\n          <div className=\"containerCaption-fig\">\r\n            <div style={{height: 13}}/>\r\n            <a>Press <span>x</span> , <span>y</span> , and <span>z</span> to rotate the object ,<br/><span>q</span> and <span>w</span> to zoom in and out , <br/>and <span>space</span> to reset view to default . </a>\r\n            <div style={{height: 13}}/>\r\n          </div>\r\n        </div>\r\n        <div className=\"containerRight\" style={{width: '43%', height: '100%', overflow: 'visible', float:'right'}}>\r\n          <br />\r\n          <p className=\"textSwitch\">units</p>\r\n          {units_switch}\r\n          <br/>\r\n          <p className=\"text\">body diameter</p>\r\n          <div style={{width:'88%', marginLeft:'5%'}}>\r\n            {slider_diameter}\r\n          </div>\r\n          <br/>\r\n          <p className=\"text\">arms</p>\r\n          {arms_switch}\r\n          <br/>\r\n          <p className=\"text\">ears</p>\r\n          {ears_switch}\r\n          <div className=\"done-basket\" style={{width: 80, marginBottom:35}}>\r\n            <NavBtn>\r\n              <NavBtnLink style={{background: \"#D14240\"}} to='/colouring'>\r\n                <p className = \"buttonText\">done</p>\r\n              </NavBtnLink>\r\n            </NavBtn>\r\n          </div>\r\n        </div>\r\n      </div>\r\n  </>  \r\n  );\r\n};\r\n\r\nexport default observer(CreateFigurine);","C:\\Users\\Lina\\Downloads\\3D-O\\frontend\\src\\components\\App.jsx",[],"C:\\Users\\Lina\\Downloads\\3D-O\\frontend\\src\\models\\RootStore.js",[],"C:\\Users\\Lina\\Downloads\\3D-O\\frontend\\src\\models\\RootStoreContext.js",["309","310","311"],"import React, { createContext, useContext } from \"react\";\r\nimport RootStore from \"./RootStore\";\r\n\r\n/**\r\n * Create a context we can use to\r\n * - Provide access to our stores from our root component\r\n * - Consume stores in our screens (or other components, though it's\r\n *   preferable to just connect screens)\r\n */\r\n// const RootStoreContext = createContext();\r\n\r\n// /**\r\n//  * The provider our root component will use to expose the root store\r\n//  */\r\n// export const RootStoreProvider = RootStoreContext.Provider;\r\n\r\n// /**\r\n//  * A hook that screens can use to gain access to our stores, with\r\n//  * `const { someStore, someOtherStore } = useStores()`,\r\n//  * or less likely: `const rootStore = useStores()`\r\n//  */\r\n// export const useStores = () => useContext(RootStoreContext);\r\n\r\n//------------------------------------------------------------------\r\n\r\nconst RootStoreContext = React.createContext();\r\n\r\nexport const RootStoreProvider = RootStoreContext.Provider;\r\n\r\n\r\n// export const RootStoreProvider = ({ children, store }) => {\r\n//     return (\r\n//       <RootStoreContext.Provider value={store}>{children}</RootStoreContext.Provider>\r\n//     );\r\n// };\r\n\r\nexport const useStores = () => React.useContext(RootStoreContext);\r\n","C:\\Users\\Lina\\Downloads\\3D-O\\frontend\\src\\components\\ResultVase\\index.js",["312","313","314","315","316"],"import React, { useRef, useState, useMemo, useEffect} from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport * as THREE from \"three\";\r\n\r\nconst ResultVase = (props) => {\r\n    const {vaseStore} = props\r\n    const itemsRef = useRef([]);\r\n\r\n    useEffect(() => {\r\n        itemsRef.current = itemsRef.current.slice(0, vaseStore.modelDimensions.length);\r\n     }, []);\r\n\r\n    useEffect(() => {\r\n        const len = vaseStore.modelDimensions.length\r\n        for(let i = 0; i < len; i += 1){\r\n            itemsRef.current[i].map = new THREE.TextureLoader().load(vaseStore.textures[len-i-1])\r\n            // console.log(vaseStore.textures[len-i-1])\r\n        }\r\n    }, [])\r\n\r\n\r\n    const s_dtop_h = vaseStore.scale_h/2\r\n    const s_dbottom_h = -1 * s_dtop_h\r\n    const scale_factor = vaseStore.scale_h/vaseStore.height\r\n\r\n    const s_dtop = vaseStore.dtop * scale_factor\r\n    const s_dbottom = vaseStore.dbottom * scale_factor\r\n\r\n    let top_rim_mesh = <mesh/>\r\n    let bottom_rim_mesh = <mesh />\r\n    let bottom_disk_mesh = <mesh />\r\n\r\n    if (vaseStore.top_rim){\r\n        top_rim_mesh = <mesh position = {[0,s_dtop_h+0.1,0]} rotation = {[1.57,0,0]}> \r\n        <torusGeometry args={[(s_dtop/2)+0.1,0.4,10,50]}/>\r\n        <meshPhongMaterial color={vaseStore.default_color} />\r\n        </mesh>\r\n    }\r\n    if (vaseStore.bottom_rim){\r\n        bottom_rim_mesh = <mesh position = {[0,s_dbottom_h-0.1,0]} rotation = {[1.57,0,0]}> \r\n        <torusGeometry args={[(s_dbottom/2)+0.1, 0.4, 10, 50]}/>\r\n        <meshPhongMaterial color={vaseStore.default_color} />\r\n        </mesh>\r\n    }\r\n\r\n    const points = useMemo(() => vaseStore.updateCurvedPts(true), [vaseStore.cm]);\r\n\r\n    let [x_rot,changeXrot] = useState(0);\r\n    let [y_rot,changeYrot] = useState(0);\r\n    let [z_rot,changeZrot] = useState(0);\r\n    let [dist,changeDist] = useState(0);\r\n\r\n    if (vaseStore.bottom_disk){\r\n        bottom_disk_mesh = <mesh position = {[0,s_dbottom_h,0]}>\r\n            <cylinderGeometry args={[s_dbottom/2, s_dbottom/2, 0.8, 32]}/>\r\n            <meshPhongMaterial color={vaseStore.default_color} />\r\n        </mesh>\r\n    }\r\n\r\n    const handleKeyDown = (event) => {\r\n        switch(event.key)\r\n        {\r\n            case \"x\":\r\n                    x_rot = x_rot + 0.1\r\n                    changeXrot(x_rot);\r\n                    break;\r\n            case \"y\": \r\n                    y_rot = y_rot + 0.1\r\n                    changeYrot(y_rot);\r\n                    break;\r\n            case \"z\": \r\n                    z_rot = z_rot + 0.1\r\n                    changeZrot(z_rot);\r\n                    break;\r\n            case \"w\": \r\n                    dist = Math.max(dist - 5,-550)\r\n                    changeDist(dist)\r\n                    break;\r\n            case \"q\": \r\n                    dist = Math.min(dist + 5,40)\r\n                    changeDist(dist)\r\n                    break;\r\n            case \" \": \r\n                    event.preventDefault()\r\n                    x_rot = 0\r\n                    y_rot = 0\r\n                    z_rot = 0 \r\n                    dist = 0\r\n                    changeXrot(x_rot)\r\n                    changeYrot(y_rot)\r\n                    changeZrot(z_rot)\r\n                    changeDist(dist)\r\n            default: \r\n                    break;\r\n        }\r\n    };\r\n    \r\n    React.useEffect(() => {\r\n        window.addEventListener('keydown', handleKeyDown);\r\n\r\n        // cleanup this component\r\n        return () => {\r\n            window.removeEventListener('keydown', handleKeyDown);\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        <group position={[0,0,dist]} rotation={[x_rot,y_rot,z_rot]}> \r\n            {points.map((_, i) => (\r\n            <group key={i}>\r\n                <mesh >\r\n                    <latheGeometry args={[points[i], 30, 0, 2*Math.PI]}/>\r\n                    <meshPhongMaterial ref={el => itemsRef.current[i] = el} side={THREE.FrontSide} specular=\"#121212\" shininess = {26}/>\r\n                </mesh>\r\n                <mesh>\r\n                    <latheGeometry args={[points[i], 30, 0, 2*Math.PI]}/>\r\n                    <meshLambertMaterial color={vaseStore.default_color} side = {THREE.BackSide} />\r\n                </mesh>\r\n            </group>   \r\n            ))}\r\n            {vaseStore.top_rim && top_rim_mesh}\r\n            {vaseStore.bottom_rim && bottom_rim_mesh}\r\n            {vaseStore.bottom_disk && bottom_disk_mesh}\r\n        </group>\r\n    )\r\n  }\r\n\r\nexport default observer(ResultVase);","C:\\Users\\Lina\\Downloads\\3D-O\\frontend\\src\\pages\\create-swan.js",["317","318","319","320"],"import React, {useEffect} from \"react\";\r\n\r\nimport {\r\n  NavBtn,\r\n  NavBtnLink\r\n} from '../components/Navbar/NavbarElements';\r\nimport { Canvas} from \"react-three-fiber\";\r\nimport Swan from \"../components/Swan\"\r\nimport './create-vase.css'\r\nimport { Slider, Rail, Handles, Tracks, Ticks } from \"react-compound-slider\";\r\nimport SwitchSelector from \"react-switch-selector\";\r\nimport { observer } from \"mobx-react\";\r\nimport { useStores } from \"../models/RootStoreContext\"\r\n\r\n\r\nconst CreateSwan = () => {\r\n\r\n  const { swanStore, coloringFormStore } = useStores();\r\n\r\n  useEffect(() => {\r\n    coloringFormStore.setModel(\"swan\", swanStore.wings)\r\n  }, [swanStore.wings])\r\n\r\n  const ears_options = [\r\n    {\r\n        label: \"∧ ∧\",\r\n        value: true,\r\n        selectedBackgroundColor: \"#E28988\",\r\n    },  {\r\n        label: \"∧\",\r\n        value: false,\r\n        selectedBackgroundColor: \"#E28988\"\r\n    }\r\n  ];\r\n\r\n  const options = [\r\n    {\r\n        label: \"y\",\r\n        value: true,\r\n        selectedBackgroundColor: \"#E28988\",\r\n    },  {\r\n        label: \"n\",\r\n        value: false,\r\n        selectedBackgroundColor: \"#E28988\"\r\n    }\r\n  ];\r\n  \r\n  const unitOptions = [\r\n    {\r\n        label: \"cm\",\r\n        value: true,\r\n        selectedBackgroundColor: \"#E28988\",\r\n    },  {\r\n        label: \"in\",\r\n        value: false,\r\n        selectedBackgroundColor: \"#E28988\"\r\n    }\r\n  ];\r\n\r\n  const sliderStyle = {  // Give the slider some width\r\n    position: 'relative',\r\n    width: '100%',\r\n    height: 15,\r\n    // border: '1px solid steelblue',\r\n  }\r\n  \r\n  const railStyle = {\r\n    position: 'absolute',\r\n    width: '100%',\r\n    height: 9,\r\n    // marginTop: 35,\r\n    borderRadius: 5,\r\n    backgroundColor: 'pink',\r\n  }\r\n  \r\n  function Handle({\r\n    handle: { id, value, percent },\r\n    getHandleProps\r\n  }) {\r\n    return (\r\n      <div className = \"straw\"\r\n        style={{\r\n          left: `${percent}%`,\r\n          position: 'absolute',\r\n          marginLeft: -15,\r\n          marginTop: -20,\r\n          zIndex: 2,\r\n          textAlign: 'right',\r\n          cursor: 'pointer',\r\n        }}\r\n        {...getHandleProps(id)}\r\n      >\r\n        <div style={{ fontFamily: 'Arial', fontSize: 16, marginTop: 15, marginLeft: 5, position:'absolute', zIndex: 3, color: \"#fff\"}}>\r\n          {value}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n    \r\n  const slider_diameter = <Slider rootStyle={sliderStyle} domain={[1, 50]} step={1} mode={2} values={[swanStore.diameter]} onUpdate={(val) => swanStore.update_diameter(val[0])} >\r\n    <Rail>\r\n      {({ getRailProps }) => (\r\n        <div style={railStyle} {...getRailProps()} />\r\n      )}\r\n    </Rail>\r\n    <Handles>\r\n      {({ handles, getHandleProps }) => (\r\n        <div className=\"slider-handles\">\r\n          {handles.map(handle => (\r\n            <Handle\r\n              key={handle.id}\r\n              handle={handle}\r\n              getHandleProps={getHandleProps}\r\n            />\r\n          ))}\r\n        </div>\r\n      )}\r\n    </Handles>\r\n  </Slider>\r\n\r\nconst rim_switch = <div className=\"switch\"  style={{width: 100, height: 50}}>\r\n<SwitchSelector\r\n    onChange={(val) => swanStore.update_rim(val)}\r\n    options={options}\r\n    initialSelectedIndex={swanStore.rim ? 0 : 1}\r\n    backgroundColor={\"#FFE7E5\"}\r\n    fontColor={\"#D75A58\"}\r\n    optionBorderRadius={30}\r\n/>\r\n</div>\r\n  \r\nconst wings_switch = <div className=\"switch\"  style={{width: 100, height: 50}}>\r\n<SwitchSelector\r\n    onChange={(val) => swanStore.update_wings(val)}\r\n    options={ears_options}\r\n    initialSelectedIndex={swanStore.wings? 0 : 1}\r\n    backgroundColor={\"#FFE7E5\"}\r\n    fontColor={\"#D75A58\"}\r\n    optionBorderRadius={30}\r\n/>\r\n</div>\r\n  \r\n  const units_switch = <div className=\"switch\" style={{width: 100, height: 50}}>\r\n      <SwitchSelector\r\n          onChange={(val) => swanStore.update_units(val)}\r\n          options={unitOptions}\r\n          initialSelectedIndex={swanStore.units ? 0 : 1}\r\n          backgroundColor={\"#FFE7E5\"}\r\n          fontColor={\"#D75A58\"}\r\n          optionBorderRadius={30}\r\n      />\r\n  </div>\r\n\r\n  return (\r\n    <>\r\n      <div className=\"container\" style={{background: '#FFE7E5', display: 'flex', flexDirection:'row', width: 'auto', height: 'auto'}}>\r\n        <div className=\"containerLeft\" style={{background: '#FFE7E5', width: '57%', height: 'auto',float:'left'}}>\r\n          <Canvas camera={{position:[0, 0, 80], fov:30, aspect: 800/600, near: 0.1,far: 1000}} style={{background: \"pink\", height: '400px', borderRadius:30, marginTop:'1%', marginLeft:'1%',width:'99%'}}>\r\n            <spotLight position={[-275, 150, 90]} intensity = {1.5}/>\r\n            <spotLight position={[10, 25, 90]} intensity = {1.3}/>\r\n            <spotLight position={[-150, -150, 110]} intensity = {0.6} />\r\n            <spotLight position={[150, -150, 110]} intensity={0.6} />\r\n            <spotLight position={[-10, 0, 25]} intensity={0.6} />\r\n            <Swan swanStore={swanStore} result={false}/>\r\n          </Canvas>\r\n          <div className=\"containerCaption-fig\">\r\n            <div style={{height: 13}}/>\r\n            <a>Press <span>x</span> , <span>y</span> , and <span>z</span> to rotate the object ,<br/><span>q</span> and <span>w</span> to zoom in and out , <br/>and <span>space</span> to reset view to default . </a>\r\n            <div style={{height: 13}}/>\r\n          </div>\r\n        </div>\r\n        <div className=\"containerRight\" style={{width: '43%', height: '100%', overflow: 'visible', float:'right'}}>\r\n          <br />\r\n          <br />\r\n          <br />\r\n          <p className=\"textSwitch\">units</p>\r\n          {units_switch}\r\n          <br/>\r\n          <p className=\"text\">body diameter</p>\r\n          <div style={{width:'88%', marginLeft:'5%'}}>\r\n            {slider_diameter}\r\n          </div>\r\n          <br/>\r\n          <div style={{display: \"inline-block\", width: \"50%\"}}>\r\n          <p className=\"text\">wings</p>\r\n          {wings_switch}\r\n          </div>\r\n          <div style={{display: \"inline-block\", width: \"50%\"}}>\r\n          <p className=\"text\">rim</p>\r\n          {rim_switch}\r\n          </div>\r\n          <div className=\"done-basket\" style={{width: 80, marginBottom:35}}>\r\n            <NavBtn>\r\n              <NavBtnLink style={{background: \"#D14240\"}} to='/colouring'>\r\n                <p className = \"buttonText\">done</p>\r\n              </NavBtnLink>\r\n            </NavBtn>\r\n          </div>\r\n        </div>\r\n      </div>\r\n  </>  \r\n  );\r\n};\r\n\r\nexport default observer(CreateSwan);","C:\\Users\\Lina\\Downloads\\3D-O\\frontend\\src\\models\\BasketStore.js",["321","322","323","324"],"C:\\Users\\Lina\\Downloads\\3D-O\\frontend\\src\\components\\Basket\\index.js",["325","326","327","328"],"import React, { useRef, useState, useMemo, useEffect} from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport * as THREE from \"three\";\r\nimport grid from \"../../assets/paper.PNG\";\r\n\r\nconst Basket = (props) => {\r\n    const {basketStore} = props\r\n    const texture = useMemo(() => new THREE.TextureLoader().load(grid), []);\r\n\r\n    const s_dtop_h = basketStore.scale_h/2\r\n    const s_dbottom_h = -1 * s_dtop_h\r\n    const scale_factor = basketStore.scale_h/basketStore.height\r\n\r\n    const s_dtop = Math.max(1,basketStore.dtop * scale_factor)\r\n    const s_dbottom = Math.max(1,basketStore.dbottom * scale_factor)\r\n\r\n    const s_diameter = Math.max(1, basketStore.diameter * scale_factor)\r\n    const s_diameter_h = 0\r\n\r\n    // need rounded bottom shape , concave\r\n\r\n    let top_rim_mesh = <mesh/>\r\n    let bottom_rim_mesh = <mesh />\r\n    let handle = <mesh /> // handle options: 1 top, 2 sides, none \r\n    let lid = <mesh/> // true false\r\n    let side_handles = <mesh/>\r\n    let bottom_disk_mesh = <mesh />\r\n    let curved_bottom = <mesh />\r\n\r\n    if (basketStore.top_rim){\r\n        top_rim_mesh = <mesh position = {[0,s_dtop_h+0.1,0]} rotation = {[1.57,0,0]}> \r\n        <torusGeometry args={[(s_dtop/2)+0.15,0.25,10,50]}/>\r\n        <meshPhongMaterial color=\"#FF7E98\" />\r\n        </mesh>\r\n    }\r\n    if (basketStore.bottom_rim){\r\n        bottom_rim_mesh = <mesh position = {[0,s_dbottom_h-0.1,0]} rotation = {[1.57,0,0]}> \r\n        <torusGeometry args={[(s_dbottom/2)+0.15, 0.25, 10, 50]}/>\r\n        <meshPhongMaterial color=\"#FF7E98\" />\r\n        </mesh>\r\n    }\r\n\r\n    if (basketStore.top_handle){\r\n        const phi_len = Math.PI * 1\r\n        const theta_len = 0.1 * Math.PI\r\n        const theta_start = Math.PI * 0.45\r\n\r\n        handle = \r\n        <group>\r\n            <mesh position={[0,s_dtop_h,0]} rotation={[-Math.PI/2,0,0]}>\r\n                <sphereGeometry args={[s_dtop/2, 20, 10, 0, phi_len, theta_start, theta_len]} />\r\n                <meshPhongMaterial map = {texture}  side = {THREE.FrontSide} />\r\n            </mesh>\r\n            <mesh position={[0,s_dtop_h,0]}  rotation={[-Math.PI/2,0,0]}>\r\n                <sphereGeometry args={[s_dtop/2, 20, 10, 0, phi_len, theta_start, theta_len]} />\r\n                <meshPhongMaterial map = {texture}  side = {THREE.BackSide} />\r\n            </mesh>\r\n        </group>\r\n    }\r\n\r\n    if (!basketStore.curved_bottom){\r\n        bottom_disk_mesh = <mesh position = {[0,s_dbottom_h,0]}>\r\n            <cylinderGeometry args={[s_dbottom/2, s_dbottom/2, 0.8, 32]}/>\r\n            <meshPhongMaterial  map={texture} />\r\n        </mesh>\r\n    }\r\n\r\n    class CustomCircleCurve extends THREE.Curve {\r\n        constructor(scale) {\r\n          super();\r\n          this.scale = scale;\r\n        }\r\n        getPoint(t) {\r\n          const tx = 0;\r\n          const ty = Math.max(-0.5, Math.sin(2 * Math.PI * t));\r\n          const tz = Math.cos(2 * Math.PI * t);\r\n          return new THREE.Vector3(tx, ty, tz).multiplyScalar(this.scale);\r\n        }\r\n      }\r\n\r\n    if (basketStore.side_handles){\r\n        const tube_scale = s_dtop/5\r\n        const path = new CustomCircleCurve(tube_scale)\r\n        const segs = 40\r\n        const tube_rad = Math.min(0.5, tube_scale/10)\r\n        const rad_segs = 7\r\n        const closed = false\r\n\r\n        side_handles =  \r\n        <group>\r\n        <mesh position={[(-s_dtop/2)+(tube_rad*2), s_dtop_h + tube_rad + (0.5*tube_scale), 0]} >\r\n            <tubeGeometry args={[path, segs, tube_rad, rad_segs, closed]} />\r\n            <meshPhongMaterial map = {texture}  side = {THREE.FrontSide} />\r\n        </mesh>\r\n        <mesh position={[(s_dtop/2)-(tube_rad*2), s_dtop_h + tube_rad + (0.5*tube_scale), 0]}>\r\n            <tubeGeometry args={[path, segs, tube_rad, rad_segs, closed]} />\r\n            <meshPhongMaterial map = {texture}  side = {THREE.FrontSide} />\r\n        </mesh>\r\n        </group>\r\n    }\r\n\r\n    if (basketStore.lid){\r\n        const lid_scale = 1\r\n        const percent_lid = 0.25\r\n        const rad_lid = (s_dtop * lid_scale/2) / Math.sin(Math.PI * percent_lid)\r\n        const lid_dist = s_dtop_h - (s_dtop* lid_scale/2) / Math.tan(Math.PI * percent_lid)\r\n        const deco_r = rad_lid/15\r\n        const deco_dist = lid_dist + rad_lid + deco_r - 0.2\r\n\r\n        lid = \r\n        <group>\r\n            <mesh position={[0,lid_dist+0.1,0]}>\r\n                <sphereGeometry args={[rad_lid, 20, 10, 0, Math.PI * 2, 0, Math.PI * percent_lid]} />\r\n                <meshPhongMaterial map = {texture}  side = {THREE.FrontSide} />\r\n            </mesh>\r\n            <mesh position={[0,lid_dist,0]}>\r\n                <sphereGeometry args={[rad_lid, 20, 10, 0, Math.PI * 2, 0, Math.PI * percent_lid]} />\r\n                <meshPhongMaterial map = {texture}  side = {THREE.BackSide} />\r\n            </mesh>\r\n            <mesh position={[0,deco_dist,0]}>\r\n                <sphereGeometry args={[deco_r, 20, 10]} />\r\n                <meshPhongMaterial map = {texture}  side = {THREE.FrontSide} />\r\n            </mesh>\r\n        </group>\r\n    }\r\n\r\n    if (basketStore.curved_bottom){\r\n        const percent_sphere = 0.2\r\n        const rad_bottom = (s_dbottom/2) / Math.sin(Math.PI * percent_sphere)\r\n        const bottom_dist = s_dbottom_h - (s_dbottom/2) / Math.tan(Math.PI * percent_sphere)\r\n\r\n        curved_bottom = <group>\r\n        <mesh position={[0,bottom_dist-0.1,0]}>\r\n            <sphereGeometry args={[rad_bottom, 20, 10, 0, Math.PI * 2, 0, Math.PI * percent_sphere]} />\r\n            <meshPhongMaterial map = {texture}  side={THREE.FrontSide}/>\r\n        </mesh>\r\n        <mesh position={[0,bottom_dist-0.1,0]}>\r\n            <sphereGeometry args={[rad_bottom, 20, 10, 0, Math.PI * 2, 0, Math.PI * percent_sphere]} />\r\n            <meshPhongMaterial map = {texture}  side = {THREE.BackSide} />\r\n        </mesh>\r\n        </group>\r\n    }\r\n    \r\n    function getInputMarker(rad, height){\r\n        return (\r\n            <mesh position = {[0,height,0]}>\r\n                <cylinderGeometry args={[rad, rad, 0.25, 40, 1, true,0, Math.PI * 2]}/>\r\n                <meshPhongMaterial color=\"red\" />\r\n            </mesh>\r\n        )\r\n    }\r\n\r\n    const dtop_marker = basketStore.top_rim ? getInputMarker((s_dtop/2) + 0.5, s_dtop_h) : getInputMarker((s_dtop/2) + 0.1, s_dtop_h) \r\n    const dbottom_marker = basketStore.bottom_rim ? getInputMarker((s_dbottom/2) + 0.5, s_dbottom_h) : getInputMarker((s_dbottom/2) + 0.1, s_dbottom_h)\r\n    const diameter_marker = getInputMarker((s_diameter/2) + 0.1, s_diameter_h)\r\n\r\n    const points = basketStore.updateCurvedPts()\r\n\r\n    let [x_rot,changeXrot] = useState(0);\r\n    let [y_rot,changeYrot] = useState(0);\r\n    let [z_rot,changeZrot] = useState(0);\r\n    let [dist,changeDist] = useState(0);\r\n\r\n    const handleKeyDown = (event) => {\r\n        switch(event.key)\r\n        {\r\n            case \"x\":\r\n                    x_rot = x_rot + 0.1\r\n                    changeXrot(x_rot);\r\n                    break;\r\n            case \"y\": \r\n                    y_rot = y_rot + 0.1\r\n                    changeYrot(y_rot);\r\n                    break;\r\n            case \"z\": \r\n                    z_rot = z_rot + 0.1\r\n                    changeZrot(z_rot);\r\n                    break;\r\n            case \"w\": \r\n                    dist = Math.max(dist - 5,-300)\r\n                    changeDist(dist)\r\n                    break;\r\n            case \"q\": \r\n                    dist = Math.min(dist + 5,50)\r\n                    changeDist(dist)\r\n                    break;\r\n            case \" \": \r\n                    event.preventDefault()\r\n                    x_rot = 0\r\n                    y_rot = 0\r\n                    z_rot = 0 \r\n                    dist = 0\r\n                    changeXrot(x_rot)\r\n                    changeYrot(y_rot)\r\n                    changeZrot(z_rot)\r\n                    changeDist(dist)\r\n            default: \r\n                    break;\r\n        }\r\n    };\r\n    \r\n    React.useEffect(() => {\r\n        window.addEventListener('keydown', handleKeyDown);\r\n\r\n        // cleanup this component\r\n        return () => {\r\n            window.removeEventListener('keydown', handleKeyDown);\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        <group position={[0,-5,dist]} rotation={[x_rot,y_rot,z_rot]}> \r\n            <mesh >\r\n                <latheGeometry args={[points, 30, 0, 2*Math.PI]}/>\r\n                <meshPhongMaterial map = {texture}  side={THREE.FrontSide} specular=\"#121212\" shininess = {26}/>\r\n            </mesh>\r\n            <mesh>\r\n                <latheGeometry args={[points, 30, 0, 2*Math.PI]}/>\r\n                <meshPhongMaterial map = {texture}  side = {THREE.BackSide} />\r\n            </mesh>\r\n            {basketStore.lid && lid}\r\n            {basketStore.top_rim && top_rim_mesh}\r\n            {basketStore.bottom_rim && bottom_rim_mesh}\r\n            {diameter_marker}\r\n            {dtop_marker}\r\n            {dbottom_marker}\r\n            {basketStore.top_handle && handle}\r\n            {basketStore.side_handles && side_handles}\r\n            {!basketStore.curved_bottom && bottom_disk_mesh}\r\n            {basketStore.curved_bottom && curved_bottom}\r\n        </group>\r\n    )\r\n  }\r\n\r\nexport default observer(Basket);","C:\\Users\\Lina\\Downloads\\3D-O\\frontend\\src\\components\\Figurine\\index.js",["329","330","331","332","333","334","335","336","337","338","339","340","341"],"import React, { useRef, useState, useMemo, useEffect} from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport * as THREE from \"three\";\r\nimport grid from \"../../assets/paper.PNG\";\r\nimport Wing from \"../Wing\"\r\n\r\nconst Figurine = (props) => {\r\n    const {figStore} = props\r\n    const texture = useMemo(() => new THREE.TextureLoader().load(grid), []) \r\n\r\n    const s_diameter = figStore.diameter \r\n    const s_diameter_h = 0\r\n\r\n    function getInputMarker(rad, height){\r\n        return (\r\n            <mesh position = {[0,height,0]}>\r\n                <cylinderGeometry args={[rad, rad, 0.25, 40, 1, true,0, Math.PI * 2]}/>\r\n                <meshPhongMaterial color=\"red\" />\r\n            </mesh>\r\n        )\r\n    }\r\n\r\n    const theta_len = 0.8\r\n    const goal_rad = (figStore.diameter * figStore.body_scale)/2\r\n    const head_rad = goal_rad/Math.sin((1-theta_len) * Math.PI)\r\n    const offset = head_rad*Math.cos((1-theta_len) * Math.PI) - 0.2\r\n\r\n    const head =\r\n    <group>\r\n        <mesh position={[0,(figStore.diameter * figStore.body_height) + offset,0]}>\r\n            <sphereGeometry args={[head_rad, 20, 14, 0, 2 * Math.PI, 0, Math.PI * theta_len]}/>\r\n            <meshPhongMaterial map = {texture}  side={THREE.FrontSide} specular=\"#121212\" shininess = {26}/>\r\n        </mesh>\r\n        <mesh position={[0,(figStore.diameter * figStore.body_height) + offset,0]}>\r\n            <sphereGeometry args={[head_rad, 20, 14, 0, 2 * Math.PI, 0, Math.PI * theta_len]}/>\r\n            <meshPhongMaterial map = {texture}  side={THREE.BackSide}/>\r\n        </mesh>\r\n    </group>\r\n\r\n    let bunny_ears = <mesh/>\r\n    let cat_ears = <mesh/> \r\n    let sphere_ears = <mesh/>\r\n    let bear_ears = <mesh/>\r\n    let arms = <mesh/>\r\n\r\n    class CustomCircleCurve extends THREE.Curve {\r\n        constructor(scale) {\r\n          super();\r\n          this.scale = scale;\r\n        }\r\n        getPoint(t) {\r\n          const tx = Math.cos(2 * Math.PI * t);\r\n          const ty = Math.max(-0.5, Math.sin(2 * Math.PI * t));\r\n          const tz = 0;\r\n          return new THREE.Vector3(tx, ty, tz).multiplyScalar(this.scale);\r\n        }\r\n    }\r\n\r\n    if(figStore.ears == \"bear\"){\r\n        const tube_scale = head_rad/3\r\n        const path = new CustomCircleCurve(tube_scale)\r\n        const segs = 40\r\n        const tube_rad = Math.min(0.5, tube_scale/7)\r\n        const rad_segs = 7\r\n        const closed = false\r\n        const y_pos = (figStore.diameter * figStore.body_height) + offset + tube_scale/4 + (head_rad * Math.cos(Math.PI/4))\r\n\r\n        bear_ears =  \r\n        <group>\r\n        <mesh position={[-(head_rad * Math.cos(Math.PI/4) + tube_scale/5),y_pos,0]} rotation={[0,0,Math.PI/4]} >\r\n            <tubeGeometry args={[path, segs, tube_rad, rad_segs, closed]} />\r\n            <meshPhongMaterial map={texture} side = {THREE.FrontSide} />\r\n        </mesh>\r\n        <mesh position={[(head_rad * Math.cos(Math.PI/4) + tube_scale/5),y_pos,0]} rotation={[0,0,-Math.PI/4]}>\r\n            <tubeGeometry args={[path, segs, tube_rad, rad_segs, closed]} />\r\n            <meshPhongMaterial  map={texture} side = {THREE.FrontSide} />\r\n        </mesh>\r\n        </group>\r\n    }\r\n\r\n    if(figStore.ears == \"cat\"){\r\n        const shape = new THREE.Shape();\r\n        const y_pos = (figStore.diameter * figStore.body_height) + offset + (head_rad * Math.cos(Math.PI/4))\r\n        const half_side_len = (head_rad/1.5)/2\r\n        shape.moveTo(-half_side_len,0);\r\n        shape.quadraticCurveTo(-half_side_len/1.2, half_side_len * 1.3, 0,half_side_len * 1.8);\r\n        shape.quadraticCurveTo(half_side_len/1.2, half_side_len * 1.3, half_side_len,0);\r\n        shape.lineTo(-half_side_len,0);\r\n\r\n        const extrudeSettings = {\r\n            steps: 1,  \r\n            depth: 1,  \r\n            bevelEnabled: false,  \r\n          };\r\n\r\n        cat_ears = \r\n        <group>\r\n        <mesh position={[(head_rad * Math.cos(Math.PI/4) - half_side_len/3),y_pos,0]} rotation={[0,0,-Math.PI/4.5]}>\r\n            <extrudeGeometry args={[shape, extrudeSettings]}/>\r\n            <meshPhongMaterial  map={texture} side={THREE.FrontSide} specular=\"#121212\" shininess = {26}/>        \r\n        </mesh>\r\n        <mesh position={[-(head_rad * Math.cos(Math.PI/4) - half_side_len/3),y_pos,0]} rotation={[0,0,Math.PI/4.5]}>\r\n            <extrudeGeometry args={[shape, extrudeSettings]}/>\r\n            <meshPhongMaterial  map={texture} side={THREE.FrontSide} specular=\"#121212\" shininess = {26}/>        \r\n        </mesh>\r\n        </group>\r\n\r\n    }\r\n\r\n    if(figStore.ears == \"bunny\"){\r\n        const bshape = new THREE.Shape();\r\n        const y_pos = (figStore.diameter * figStore.body_height) + offset + (head_rad * Math.cos(Math.PI/4))\r\n        const half_side_len = (head_rad/2)/2\r\n        bshape.moveTo(-half_side_len,0);\r\n        bshape.lineTo(-half_side_len, half_side_len * 3)\r\n        bshape.quadraticCurveTo(-half_side_len/2, (half_side_len * 4), 0,half_side_len * 4);\r\n        bshape.quadraticCurveTo(half_side_len/2, half_side_len * 4, half_side_len, half_side_len * 3);\r\n        bshape.lineTo(half_side_len,0);\r\n\r\n        const extrudeSettings = {\r\n            steps: 1,  \r\n            depth: 1,  \r\n            bevelEnabled: false,  \r\n          };\r\n\r\n        bunny_ears = \r\n        <group>\r\n        <mesh position={[(head_rad * Math.cos(Math.PI/4) - half_side_len/3),y_pos,0]} rotation={[0,0,-Math.PI/4]}>\r\n            <extrudeGeometry args={[bshape, extrudeSettings]}/>\r\n            <meshPhongMaterial  map={texture} side={THREE.FrontSide} specular=\"#121212\" shininess = {26}/>        \r\n        </mesh>\r\n        <mesh position={[-(head_rad * Math.cos(Math.PI/4) - half_side_len/3),y_pos,0]} rotation={[0,0,Math.PI/4]}>\r\n            <extrudeGeometry args={[bshape, extrudeSettings]}/>\r\n            <meshPhongMaterial  map={texture} side={THREE.FrontSide} specular=\"#121212\" shininess = {26}/>        \r\n        </mesh>\r\n        </group>\r\n    }\r\n\r\n    if(figStore.ears == \"sphere\"){\r\n        const ear_rad = head_rad/3.5\r\n        const y_pos = (figStore.diameter * figStore.body_height) + offset + ear_rad + (head_rad * Math.cos(Math.PI/4))\r\n        sphere_ears = \r\n        <group>\r\n            <mesh position={[-(head_rad * Math.cos(Math.PI/4)),y_pos,0]} rotation={[0,0,Math.PI/4]}>\r\n                <sphereGeometry args={[ear_rad, 20, 14, 0, 2 * Math.PI, 0, Math.PI ]}/>\r\n                <meshPhongMaterial  map={texture} side={THREE.FrontSide} specular=\"#121212\" shininess = {26}/>\r\n            </mesh>\r\n            <mesh position={[(head_rad * Math.cos(Math.PI/4)),y_pos,0]} rotation={[0,0,-Math.PI/4]}>\r\n                <sphereGeometry args={[ear_rad, 20, 14, 0, 2 * Math.PI, 0, Math.PI ]}/>\r\n                <meshPhongMaterial  map={texture} side={THREE.FrontSide} specular=\"#121212\" shininess = {26}/>\r\n            </mesh>\r\n        </group>\r\n    }\r\n\r\n    if (figStore.arms){\r\n        const arm_rad = figStore.diameter/7\r\n        const y_pos = (figStore.diameter * figStore.body_height)/2\r\n        const x_pos = (figStore.diameter * figStore.body_scale)/2 + arm_rad*1.3\r\n        arms = \r\n        <group>\r\n            <mesh position={[-(x_pos),y_pos,0]} rotation={[0,0,Math.PI/2.65]}>\r\n                <cylinderGeometry args={[arm_rad, arm_rad, arm_rad*1.3, 15]} />\r\n                <meshPhongMaterial  map={texture} side={THREE.FrontSide} specular=\"#121212\" shininess = {26}/>\r\n            </mesh>\r\n            <mesh position={[x_pos,y_pos,0]} rotation={[0,0,-Math.PI/2.65]}>\r\n                <cylinderGeometry args={[arm_rad, arm_rad, arm_rad*1.3, 15]} />\r\n                <meshPhongMaterial  map={texture} side={THREE.FrontSide} specular=\"#121212\" shininess = {26}/>\r\n            </mesh>\r\n        </group>\r\n    }\r\n\r\n    const points = figStore.updateCurvedPts()\r\n    const diameter_marker = getInputMarker((s_diameter/2) + 0.1, s_diameter_h)\r\n\r\n    let [x_rot,changeXrot] = useState(0);\r\n    let [y_rot,changeYrot] = useState(0);\r\n    let [z_rot,changeZrot] = useState(0);\r\n    let [dist,changeDist] = useState(0);\r\n\r\n    const handleKeyDown = (event) => {\r\n        switch(event.key)\r\n        {\r\n            case \"x\":\r\n                    x_rot = x_rot + 0.1\r\n                    changeXrot(x_rot);\r\n                    break;\r\n            case \"y\": \r\n                    y_rot = y_rot + 0.1\r\n                    changeYrot(y_rot);\r\n                    break;\r\n            case \"z\": \r\n                    z_rot = z_rot + 0.1\r\n                    changeZrot(z_rot);\r\n                    break;\r\n            case \"w\": \r\n                    dist = Math.max(dist - 5,-300)\r\n                    changeDist(dist)\r\n                    break;\r\n            case \"q\": \r\n                    dist = Math.min(dist + 5,50)\r\n                    changeDist(dist)\r\n                    break;\r\n            case \" \": \r\n                    event.preventDefault()\r\n                    x_rot = 0\r\n                    y_rot = 0\r\n                    z_rot = 0 \r\n                    dist = 0\r\n                    changeXrot(x_rot)\r\n                    changeYrot(y_rot)\r\n                    changeZrot(z_rot)\r\n                    changeDist(dist)\r\n            default: \r\n                    break;\r\n        }\r\n    };\r\n    \r\n    React.useEffect(() => {\r\n        window.addEventListener('keydown', handleKeyDown);\r\n\r\n        // cleanup this component\r\n        return () => {\r\n            window.removeEventListener('keydown', handleKeyDown);\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        <group position={[0,-7,dist]} rotation={[x_rot,y_rot,z_rot]}> \r\n            <mesh >\r\n                <latheGeometry args={[points, 30, 0, 2*Math.PI]}/>\r\n                <meshPhongMaterial map = {texture}  side={THREE.FrontSide} specular=\"#121212\" shininess = {26}/>\r\n            </mesh>\r\n            <mesh>\r\n                <latheGeometry args={[points, 30, 0, 2*Math.PI]}/>\r\n                <meshPhongMaterial map = {texture}  side = {THREE.BackSide} />\r\n            </mesh>\r\n            {head}\r\n            {diameter_marker}\r\n            {figStore.ears == \"bear\" && bear_ears}\r\n            {figStore.ears == \"bunny\" && bunny_ears}\r\n            {figStore.ears == \"cat\" && cat_ears}\r\n            {figStore.ears == \"sphere\" && sphere_ears}\r\n            {figStore.arms && arms}\r\n        </group>\r\n    )\r\n  }\r\n\r\nexport default observer(Figurine);","C:\\Users\\Lina\\Downloads\\3D-O\\frontend\\src\\models\\FigurineStore.js",["342","343","344"],"C:\\Users\\Lina\\Downloads\\3D-O\\frontend\\src\\components\\Wing\\index.js",["345","346","347","348","349","350","351","352"],"import React, { useRef, useState, useMemo, useEffect} from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport * as THREE from \"three\";\r\nimport grid from \"../../assets/paper.PNG\";\r\n\r\nconst Wing = (props) => {\r\n    const {vertices, purpose} = props\r\n    const my_vertices = useMemo(() => vertices.map(v => new THREE.Vector3(...v)), [])\r\n\r\n    const faces = []\r\n    if (purpose == \"wing\"){\r\n        faces.push(\r\n            new THREE.Face3(17, 8, 7),\r\n            new THREE.Face3(16, 17, 7),\r\n            new THREE.Face3(16, 7, 6),\r\n            new THREE.Face3(15, 16, 6),\r\n            new THREE.Face3(15, 6, 5),\r\n            new THREE.Face3(14, 15, 5),\r\n            new THREE.Face3(14, 5, 4),\r\n            new THREE.Face3(13, 14, 4),\r\n            new THREE.Face3(13, 4, 3),\r\n            new THREE.Face3(12, 13, 3),\r\n            new THREE.Face3(12, 3, 2),\r\n            new THREE.Face3(11, 12, 2),\r\n            new THREE.Face3(11, 2, 1),\r\n            new THREE.Face3(10, 11, 1),\r\n            new THREE.Face3(10, 1, 0),\r\n            new THREE.Face3(9, 10, 0),\r\n            // top row \r\n            new THREE.Face3(18, 17, 16),\r\n            new THREE.Face3(18, 16, 15),\r\n            new THREE.Face3(18, 15, 14),\r\n            new THREE.Face3(18, 14, 13),\r\n            new THREE.Face3(18, 13, 12),\r\n            new THREE.Face3(18, 12, 11),\r\n            new THREE.Face3(18, 11, 10),\r\n            new THREE.Face3(18, 10, 9),\r\n        )\r\n    }\r\n    else if (purpose == \"front-back\"){\r\n        faces.push(\r\n            new THREE.Face3(5, 4, 3),\r\n            new THREE.Face3(5, 3, 2),\r\n            new THREE.Face3(5, 2, 1),\r\n            new THREE.Face3(5, 1, 0),\r\n        )\r\n    }\r\n\r\n    else if (purpose == \"one-wing\"){\r\n        faces.push(\r\n            new THREE.Face3(9, 8, 7),\r\n            new THREE.Face3(9, 7, 6),\r\n            new THREE.Face3(9, 6, 5),\r\n            new THREE.Face3(9, 5, 4),\r\n            new THREE.Face3(9, 4, 3),\r\n            new THREE.Face3(9, 3, 2),\r\n            new THREE.Face3(9, 2, 1),\r\n            new THREE.Face3(9, 1, 0),\r\n        )\r\n    }\r\n\r\n    // const uvs = [[\r\n    //     // front\r\n    //     [ new THREE.Vector2(0, 0), new THREE.Vector2(1, 1), new THREE.Vector2(0, 1) ],\r\n    //     [ new THREE.Vector2(0, 0), new THREE.Vector2(1, 0), new THREE.Vector2(1, 1) ],\r\n    //     // right\r\n    //     [ new THREE.Vector2(0, 0), new THREE.Vector2(1, 1), new THREE.Vector2(0, 1) ],\r\n    //     [ new THREE.Vector2(0, 0), new THREE.Vector2(1, 0), new THREE.Vector2(1, 1) ],\r\n    //     // back\r\n    //     [ new THREE.Vector2(0, 0), new THREE.Vector2(1, 1), new THREE.Vector2(0, 1) ],\r\n    //     [ new THREE.Vector2(0, 0), new THREE.Vector2(1, 0), new THREE.Vector2(1, 1) ],\r\n    //     // left\r\n    //     [ new THREE.Vector2(0, 0), new THREE.Vector2(1, 1), new THREE.Vector2(0, 1) ],\r\n    //     [ new THREE.Vector2(0, 0), new THREE.Vector2(1, 0), new THREE.Vector2(1, 1) ],\r\n    //     // top\r\n    //     [ new THREE.Vector2(0, 0), new THREE.Vector2(1, 1), new THREE.Vector2(0, 1) ],\r\n    //     [ new THREE.Vector2(0, 0), new THREE.Vector2(1, 0), new THREE.Vector2(1, 1) ],\r\n    //     // bottom\r\n    //     [ new THREE.Vector2(0, 0), new THREE.Vector2(1, 1), new THREE.Vector2(0, 1) ],\r\n    //     [ new THREE.Vector2(0, 0), new THREE.Vector2(1, 0), new THREE.Vector2(1, 1) ],\r\n    // ]]\r\n\r\n    function update(geometry){\r\n        geometry.computeFaceNormals()\r\n        geometry.computeVertexNormals();\r\n        for (let i = 0; i < geometry.vertices.length; i++){\r\n            geometry.vertices[i].x = vertices[i][0]\r\n            geometry.vertices[i].y = vertices[i][1]\r\n            geometry.vertices[i].z = vertices[i][2]\r\n        }\r\n        geometry.verticesNeedUpdate = true\r\n        geometry.normalsNeedUpdate = true;\r\n    }\r\n\r\n    return (\r\n        // <geometry vertices={my_vertices} faces={faces} faceVertexUVs={uvs} onUpdate={update}/>\r\n        <geometry vertices={my_vertices} faces={faces} onUpdate={update}/>\r\n    )\r\n  }\r\n\r\nexport default observer(Wing);","C:\\Users\\Lina\\Downloads\\3D-O\\frontend\\src\\models\\SwanStore.js",["353","354"],"C:\\Users\\Lina\\Downloads\\3D-O\\frontend\\src\\components\\Swan\\index.js",["355","356","357","358","359","360"],"import React, { useRef, useState, useMemo, useEffect} from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport * as THREE from \"three\";\r\nimport grid from \"../../assets/paper.PNG\";\r\nimport Wing from \"../Wing\"\r\n\r\nconst Swan = (props) => {\r\n    const {swanStore, result} = props\r\n    const image = result ? swanStore.texture : grid\r\n    const texture = useMemo(() => new THREE.TextureLoader().load(image), []) \r\n\r\n    function getInputMarker(rad, height){\r\n        return (\r\n            <mesh position = {[0,height,0]}>\r\n                <cylinderGeometry args={[rad, rad, 0.25, 40, 1, true,0, Math.PI * 2]}/>\r\n                <meshPhongMaterial color=\"red\" />\r\n            </mesh>\r\n        )\r\n    }\r\n\r\n    const swan_pts = swanStore.swanBodyPts()\r\n\r\n    const swan_body = \r\n    <group>\r\n        <mesh >\r\n            <latheGeometry args={[swan_pts, 30, 0, 2*Math.PI]}/>\r\n            <meshPhongMaterial map = {texture}  side={THREE.FrontSide} specular=\"#121212\" shininess = {26}/>\r\n        </mesh>\r\n        <mesh>\r\n            <latheGeometry args={[swan_pts, 30, 0, 2*Math.PI]}/>\r\n            <meshPhongMaterial map = {texture}  side = {THREE.BackSide} />\r\n        </mesh>\r\n    </group>\r\n\r\n    const bottom = swanStore.diameter * swanStore.height_scale * 0.8 * -1\r\n    const rim_mesh = <mesh position = {[0,bottom-0.1,0]} rotation = {[1.57,0,0]}> \r\n    <torusGeometry args={[(swanStore.diameter * swanStore.bottom_scale/2)+0.1, swanStore.diameter/70, 10, 50]}/>\r\n    <meshPhongMaterial color={result? swanStore.default_color : \"#FF7E98\"} />\r\n    </mesh>\r\n\r\n    function getX(angle, radius){\r\n        return  radius * Math.cos(angle)\r\n    }\r\n\r\n    function getY(angle, radius){\r\n        return radius * Math.sin(angle)\r\n    }\r\n\r\n    const bottomRad = swanStore.diameter * swanStore.top_scale * 0.5\r\n    const midRad = swanStore.diameter * swanStore.top_scale * 0.5 * 0.73\r\n    const midHeight = swanStore.diameter * swanStore.height_scale * 1.7 * 0.5\r\n    const topHeight = swanStore.diameter * swanStore.height_scale * 1.9\r\n\r\n    const vertices =\r\n    [\r\n        // bottom row\r\n        [getX(Math.PI/2.8, bottomRad), 0, getY(Math.PI/2.8, bottomRad)],  // 0\r\n        [getX(Math.PI/3.7, bottomRad), 0, getY(Math.PI/3.7, bottomRad)],  // 1\r\n        [getX(Math.PI/6, bottomRad), 0, getY(Math.PI/6, bottomRad)],  // 2\r\n        [getX(Math.PI/12, bottomRad), 0, getY(Math.PI/12, bottomRad)],  // 3\r\n        [getX(0, bottomRad), 0, getY(0, bottomRad)],  // 4\r\n        [getX(Math.PI/12, bottomRad), 0, -getY(Math.PI/12, bottomRad)],  // 5\r\n        [getX(Math.PI/6, bottomRad), 0, -getY(Math.PI/6, bottomRad)],  // 6\r\n        [getX(Math.PI/3.7, bottomRad), 0, -getY(Math.PI/3.7, bottomRad)],  // 7\r\n        [getX(Math.PI/2.8, bottomRad), 0, -getY(Math.PI/2.8, bottomRad)],  // 8\r\n        // middle row\r\n        [getX(Math.PI/2.8, midRad), midHeight, getY(Math.PI/2.8, midRad)],  // 9\r\n        [getX(Math.PI/3.7, midRad), midHeight, getY(Math.PI/3.7, midRad)],  // 10\r\n        [getX(Math.PI/6, midRad), midHeight, getY(Math.PI/6, midRad)],  // 11\r\n        [getX(Math.PI/12, midRad), midHeight, getY(Math.PI/12, midRad)],  // 12\r\n        [getX(0, midRad), midHeight, getY(0, midRad)],  // 13\r\n        [getX(Math.PI/12, midRad), midHeight, -getY(Math.PI/12, midRad)],  // 14\r\n        [getX(Math.PI/6, midRad), midHeight, -getY(Math.PI/6, midRad)],  // 15\r\n        [getX(Math.PI/3.7, midRad), midHeight, -getY(Math.PI/3.7, midRad)],  // 16\r\n        [getX(Math.PI/2.8, midRad), midHeight, -getY(Math.PI/2.8, midRad)],  // 17\r\n        // heights\r\n        [bottomRad/6, topHeight, 0]  // 18\r\n    ];\r\n\r\n    const big_vertices = \r\n    [\r\n        [-getX(-Math.PI/6, bottomRad), 0, -getY(-Math.PI/6, bottomRad)],  // 0\r\n        [-getX(0, bottomRad), 0, -getY(0, bottomRad)],  // 1\r\n        [-getX(Math.PI/8, bottomRad), 0, -getY(Math.PI/8, bottomRad)],  // 2\r\n        [-getX(5*Math.PI/16, bottomRad), 0, -getY(5*Math.PI/16, bottomRad)],  // 3        \r\n        [getX(Math.PI/2, bottomRad), 0, -getY(Math.PI/2, bottomRad)],  // 4\r\n        [getX(5*Math.PI/16, bottomRad), 0, -getY(5*Math.PI/16, bottomRad)],  // 5  \r\n        [getX(Math.PI/8, bottomRad), 0, -getY(Math.PI/8, bottomRad)],  // 6\r\n        [getX(0, bottomRad), 0, -getY(0, bottomRad)],  // 7\r\n        [getX(-Math.PI/6, bottomRad), 0, -getY(-Math.PI/6, bottomRad)],  // 8\r\n        [0, topHeight*1.1, -bottomRad*1.25]  // 9\r\n    ];\r\n\r\n    const F_vertices = [\r\n        // bottom row\r\n        [-getX(Math.PI/2.8, bottomRad), 0, getY(Math.PI/2.8, bottomRad)],  // 0\r\n        [-getX(Math.PI/2.4, bottomRad), 0, getY(Math.PI/2.4, bottomRad)],  // 1\r\n        [getX(Math.PI/2, bottomRad), 0, getY(Math.PI/2, bottomRad)],  // 2\r\n        [getX(Math.PI/2.4, bottomRad), 0, getY(Math.PI/2.4, bottomRad)],  // 3\r\n        [getX(Math.PI/2.8, bottomRad), 0, getY(Math.PI/2.8, bottomRad)],  // 4\r\n        [0, topHeight/3, bottomRad/1.3]  // 5\r\n    ];\r\n\r\n    const big_F_vertices = [\r\n        // bottom row\r\n        [-getX(Math.PI/4, bottomRad), 0, getY(Math.PI/4, bottomRad)],  // 0\r\n        [-getX(Math.PI/3, bottomRad), 0, getY(Math.PI/3, bottomRad)],  // 1\r\n        [getX(Math.PI/2, bottomRad), 0, getY(Math.PI/2, bottomRad)],  // 2\r\n        [getX(Math.PI/3, bottomRad), 0, getY(Math.PI/3, bottomRad)],  // 3\r\n        [getX(Math.PI/4, bottomRad), 0, getY(Math.PI/4, bottomRad)],  // 4\r\n        [0, topHeight/1.7, bottomRad/1.8]  // 5\r\n    ];\r\n\r\n    const L_vertices = []\r\n    for (let i = 0; i < vertices.length; i++){\r\n        let temp = []\r\n        temp.push(-1 * vertices[i][0],vertices[i][1],vertices[i][2])\r\n        L_vertices.push(temp)\r\n    }\r\n\r\n    const B_vertices = []\r\n    for (let i = 0; i < F_vertices.length-1; i++){\r\n        let temp = []\r\n        temp.push(F_vertices[i][0],F_vertices[i][1], -1 * F_vertices[i][2])\r\n        B_vertices.push(temp)\r\n    }\r\n    B_vertices.push([0, topHeight/4, -bottomRad * 1.1])\r\n\r\n    const y_pos_wing = swanStore.diameter * swanStore.height_scale\r\n    const wings = \r\n    <group>\r\n        <mesh position={[0,y_pos_wing,0]}>\r\n            <Wing vertices={vertices} purpose={\"wing\"}/>\r\n            <meshPhongMaterial color={swanStore.default_color} side={THREE.FrontSide} specular=\"#121212\" shininess = {26} />\r\n        </mesh>\r\n        <mesh position={[0,y_pos_wing,0]}>\r\n            <Wing vertices={vertices} purpose={\"wing\"}/>\r\n            <meshPhongMaterial color={swanStore.default_color} side={THREE.BackSide} />\r\n        </mesh>\r\n        <mesh position={[0,y_pos_wing,0]}>\r\n            <Wing vertices={L_vertices} purpose={\"wing\"}/>\r\n            <meshPhongMaterial color={swanStore.default_color} side={THREE.FrontSide} specular=\"#121212\" shininess = {26} />\r\n        </mesh>\r\n        <mesh position={[0,y_pos_wing,0]}>\r\n            <Wing vertices={L_vertices} purpose={\"wing\"}/>\r\n            <meshPhongMaterial color={swanStore.default_color} side={THREE.BackSide} />\r\n        </mesh>\r\n        <mesh position={[0,y_pos_wing,0]}>\r\n            <Wing vertices={F_vertices} purpose={\"front-back\"}/>\r\n            <meshPhongMaterial color={swanStore.default_color} side={THREE.FrontSide} specular=\"#121212\" shininess = {26} />\r\n        </mesh>\r\n        <mesh position={[0,y_pos_wing,0]}>\r\n            <Wing vertices={F_vertices} purpose={\"front-back\"}/>\r\n            <meshPhongMaterial color={swanStore.default_color} side={THREE.BackSide} />\r\n        </mesh>\r\n        <mesh position={[0,y_pos_wing,0]}>\r\n            <Wing vertices={B_vertices} purpose={\"front-back\"}/>\r\n            <meshPhongMaterial color={swanStore.default_color} side={THREE.FrontSide} specular=\"#121212\" shininess = {26} />\r\n        </mesh>\r\n        <mesh position={[0,y_pos_wing,0]}>\r\n            <Wing vertices={B_vertices} purpose={\"front-back\"}/>\r\n            <meshPhongMaterial color={swanStore.default_color} side={THREE.BackSide} />\r\n        </mesh>\r\n    </group>\r\n\r\n    const one_wing = <group>\r\n        <mesh position={[0,y_pos_wing,0]}>\r\n            <Wing vertices={big_vertices} purpose={\"one-wing\"}/>\r\n            <meshPhongMaterial color={swanStore.default_color} side={THREE.FrontSide} specular=\"#121212\" shininess = {26} />\r\n        </mesh>\r\n        <mesh position={[0,y_pos_wing,0]}>\r\n            <Wing vertices={big_vertices} purpose={\"one-wing\"}/>\r\n            <meshPhongMaterial color={swanStore.default_color} side={THREE.BackSide} />\r\n        </mesh>\r\n        <mesh position={[0,y_pos_wing,0]}>\r\n            <Wing vertices={big_F_vertices} purpose={\"front-back\"}/>\r\n            <meshPhongMaterial color={swanStore.default_color} side={THREE.FrontSide} specular=\"#121212\" shininess = {26} />\r\n        </mesh>\r\n        <mesh position={[0,y_pos_wing,0]}>\r\n            <Wing vertices={big_F_vertices} purpose={\"front-back\"}/>\r\n            <meshPhongMaterial color={swanStore.default_color} side={THREE.BackSide} />\r\n        </mesh>\r\n    </group>\r\n\r\n    const shape = useMemo( () => new THREE.Shape(), [swanStore.diameter]);\r\n    const param = swanStore.diameter * 0.3\r\n    const t = param * 0.4\r\n    shape.moveTo(0, -param*1.3);\r\n    shape.lineTo(param*0.9, 0)\r\n    shape.quadraticCurveTo(param + param/3, param*1.5/2,param, param * 1.4)\r\n    shape.quadraticCurveTo(param/2, param * 1.9, -param/3,param)\r\n    shape.lineTo(-param/2.5, param - (1.5*t))\r\n    shape.quadraticCurveTo(param/2 , (param * 1.9) - t, param -t/1.5 , (param * 1.5) - t/1.5)\r\n    shape.quadraticCurveTo((param + param/3.5) -t/1.5, (param*1.5/2) + t/1.5, param -t/1.5, t/1.5)\r\n    \r\n    const depth = param/6\r\n\r\n    const extrudeSettings = {\r\n        steps: 100,  \r\n        depth: depth,  \r\n        bevelEnabled: false,   \r\n      };\r\n      \r\n\r\n    const offset = swanStore.diameter * swanStore.height_scale + (param*1.3) + ((topHeight/3) * 0)\r\n    const neck_mesh = <mesh position={[-depth/2,offset,(bottomRad/1)]} rotation={[0, Math.PI/2, 0]}>\r\n        <extrudeGeometry args={[shape, extrudeSettings]}/>\r\n        <meshPhongMaterial color={swanStore.default_color} side={THREE.FrontSide} specular=\"#121212\" shininess = {26}/>\r\n    </mesh>\r\n\r\n\r\n    const diameter_marker = getInputMarker((swanStore.diameter/2) + 0.1, 0)\r\n\r\n    let [x_rot,changeXrot] = useState(0);\r\n    let [y_rot,changeYrot] = useState(0);\r\n    let [z_rot,changeZrot] = useState(0);\r\n    let [dist,changeDist] = useState(0);\r\n\r\n    const handleKeyDown = (event) => {\r\n        switch(event.key)\r\n        {\r\n            case \"x\":\r\n                    x_rot = x_rot + 0.1\r\n                    changeXrot(x_rot);\r\n                    break;\r\n            case \"y\": \r\n                    y_rot = y_rot + 0.1\r\n                    changeYrot(y_rot);\r\n                    break;\r\n            case \"z\": \r\n                    z_rot = z_rot + 0.1\r\n                    changeZrot(z_rot);\r\n                    break;\r\n            case \"w\": \r\n                    dist = Math.max(dist - 5,-300)\r\n                    changeDist(dist)\r\n                    break;\r\n            case \"q\": \r\n                    dist = Math.min(dist + 5,50)\r\n                    changeDist(dist)\r\n                    break;\r\n            case \" \": \r\n                    event.preventDefault()\r\n                    x_rot = 0\r\n                    y_rot = 0\r\n                    z_rot = 0 \r\n                    dist = 0\r\n                    changeXrot(x_rot)\r\n                    changeYrot(y_rot)\r\n                    changeZrot(z_rot)\r\n                    changeDist(dist)\r\n            default: \r\n                    break;\r\n        }\r\n    };\r\n    \r\n    React.useEffect(() => {\r\n        window.addEventListener('keydown', handleKeyDown);\r\n\r\n        // cleanup this component\r\n        return () => {\r\n            window.removeEventListener('keydown', handleKeyDown);\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        <group position={[0,-7,dist]} rotation={[x_rot,y_rot,z_rot]}> \r\n            {swan_body}\r\n            {!swanStore.wings && one_wing}\r\n            {swanStore.wings && wings}\r\n            {!result && diameter_marker}\r\n            {swanStore.rim && rim_mesh}\r\n            {neck_mesh}\r\n        </group>\r\n    )\r\n  }\r\n\r\nexport default observer(Swan);","C:\\Users\\Lina\\Downloads\\3D-O\\frontend\\src\\models\\RowModel.js",[],"C:\\Users\\Lina\\Downloads\\3D-O\\frontend\\src\\models\\PxModel.js",[],"C:\\Users\\Lina\\Downloads\\3D-O\\frontend\\src\\models\\DrawingSectionModel.js",[],"C:\\Users\\Lina\\Downloads\\3D-O\\frontend\\src\\components\\ResultBasket\\index.js",["361","362","363","364","365","366","367"],"import React, { useRef, useState, useMemo, useEffect} from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport * as THREE from \"three\";\r\n\r\nconst ResultBasket = (props) => {\r\n    const {basketStore} = props\r\n    const itemsRef = useRef([]);\r\n\r\n    useEffect(() => {\r\n        itemsRef.current = itemsRef.current.slice(0, basketStore.modelDimensions.length);\r\n     }, []);\r\n\r\n    useEffect(() => {\r\n        const len = basketStore.modelDimensions.length\r\n        for(let i = 0; i < len; i += 1){\r\n            itemsRef.current[i].map = new THREE.TextureLoader().load(basketStore.textures[len-i-1])\r\n            // console.log(basketStore.textures[len-i-1])\r\n        }\r\n    }, [])\r\n\r\n    const s_dtop_h = basketStore.scale_h/2\r\n    const s_dbottom_h = -1 * s_dtop_h\r\n    const scale_factor = basketStore.scale_h/basketStore.height\r\n\r\n    const s_dtop = Math.max(1,basketStore.dtop * scale_factor)\r\n    const s_dbottom = Math.max(1,basketStore.dbottom * scale_factor)\r\n\r\n    const s_diameter = Math.max(1, basketStore.diameter * scale_factor)\r\n    const s_diameter_h = 0\r\n\r\n    // need rounded bottom shape , concave\r\n\r\n    let top_rim_mesh = <mesh/>\r\n    let bottom_rim_mesh = <mesh />\r\n    let handle = <mesh /> // handle options: 1 top, 2 sides, none \r\n    let lid = <mesh/> // true false\r\n    let side_handles = <mesh/>\r\n    let bottom_disk_mesh = <mesh />\r\n    let curved_bottom = <mesh />\r\n\r\n    if (basketStore.top_rim){\r\n        top_rim_mesh = <mesh position = {[0,s_dtop_h+0.1,0]} rotation = {[1.57,0,0]}> \r\n        <torusGeometry args={[(s_dtop/2)+0.15,0.25,10,50]}/>\r\n        <meshPhongMaterial color={basketStore.default_color} />\r\n        </mesh>\r\n    }\r\n    if (basketStore.bottom_rim){\r\n        bottom_rim_mesh = <mesh position = {[0,s_dbottom_h-0.1,0]} rotation = {[1.57,0,0]}> \r\n        <torusGeometry args={[(s_dbottom/2)+0.15, 0.25, 10, 50]}/>\r\n        <meshPhongMaterial color={basketStore.default_color} />\r\n        </mesh>\r\n    }\r\n\r\n    if (basketStore.top_handle){\r\n        const phi_len = Math.PI * 1\r\n        const theta_len = 0.1 * Math.PI\r\n        const theta_start = Math.PI * 0.45\r\n\r\n        handle = \r\n        <group>\r\n            <mesh position={[0,s_dtop_h,0]} rotation={[-Math.PI/2,0,0]}>\r\n                <sphereGeometry args={[s_dtop/2, 20, 10, 0, phi_len, theta_start, theta_len]} />\r\n                <meshPhongMaterial color={basketStore.default_color} side = {THREE.FrontSide} />\r\n            </mesh>\r\n            <mesh position={[0,s_dtop_h,0]}  rotation={[-Math.PI/2,0,0]}>\r\n                <sphereGeometry args={[s_dtop/2, 20, 10, 0, phi_len, theta_start, theta_len]} />\r\n                <meshPhongMaterial color={basketStore.default_color} side = {THREE.BackSide} />\r\n            </mesh>\r\n        </group>\r\n    }\r\n\r\n    if (!basketStore.curved_bottom){\r\n        bottom_disk_mesh = <mesh position = {[0,s_dbottom_h,0]}>\r\n            <cylinderGeometry args={[s_dbottom/2, s_dbottom/2, 0.8, 32]}/>\r\n            <meshPhongMaterial color={basketStore.default_color} />\r\n        </mesh>\r\n    }\r\n\r\n    class CustomCircleCurve extends THREE.Curve {\r\n        constructor(scale) {\r\n          super();\r\n          this.scale = scale;\r\n        }\r\n        getPoint(t) {\r\n          const tx = 0;\r\n          const ty = Math.max(-0.5, Math.sin(2 * Math.PI * t));\r\n          const tz = Math.cos(2 * Math.PI * t);\r\n          return new THREE.Vector3(tx, ty, tz).multiplyScalar(this.scale);\r\n        }\r\n      }\r\n\r\n    if (basketStore.side_handles){\r\n        const tube_scale = s_dtop/5\r\n        const path = new CustomCircleCurve(tube_scale)\r\n        const segs = 40\r\n        const tube_rad = Math.min(0.5, tube_scale/10)\r\n        const rad_segs = 7\r\n        const closed = false\r\n\r\n        side_handles =  \r\n        <group>\r\n        <mesh position={[(-s_dtop/2)+(tube_rad*2), s_dtop_h + tube_rad + (0.5*tube_scale), 0]} >\r\n            <tubeGeometry args={[path, segs, tube_rad, rad_segs, closed]} />\r\n            <meshPhongMaterial color={basketStore.default_color} side = {THREE.FrontSide} />\r\n        </mesh>\r\n        <mesh position={[(s_dtop/2)-(tube_rad*2), s_dtop_h + tube_rad + (0.5*tube_scale), 0]}>\r\n            <tubeGeometry args={[path, segs, tube_rad, rad_segs, closed]} />\r\n            <meshPhongMaterial color={basketStore.default_color} side = {THREE.FrontSide} />\r\n        </mesh>\r\n        </group>\r\n    }\r\n\r\n    if (basketStore.lid){\r\n        const lid_scale = 1\r\n        const percent_lid = 0.25\r\n        const rad_lid = (s_dtop * lid_scale/2) / Math.sin(Math.PI * percent_lid)\r\n        const lid_dist = s_dtop_h - (s_dtop* lid_scale/2) / Math.tan(Math.PI * percent_lid)\r\n        const deco_r = rad_lid/15\r\n        const deco_dist = lid_dist + rad_lid + deco_r - 0.2\r\n\r\n        lid = \r\n        <group>\r\n            <mesh position={[0,lid_dist+0.1,0]}>\r\n                <sphereGeometry args={[rad_lid, 20, 10, 0, Math.PI * 2, 0, Math.PI * percent_lid]} />\r\n                <meshPhongMaterial color={basketStore.default_color} side = {THREE.FrontSide} />\r\n            </mesh>\r\n            <mesh position={[0,lid_dist,0]}>\r\n                <sphereGeometry args={[rad_lid, 20, 10, 0, Math.PI * 2, 0, Math.PI * percent_lid]} />\r\n                <meshPhongMaterial color={basketStore.default_color} side = {THREE.BackSide} />\r\n            </mesh>\r\n            <mesh position={[0,deco_dist,0]}>\r\n                <sphereGeometry args={[deco_r, 20, 10]} />\r\n                <meshPhongMaterial color={basketStore.default_color} side = {THREE.FrontSide} />\r\n            </mesh>\r\n        </group>\r\n    }\r\n\r\n    if (basketStore.curved_bottom){\r\n        const percent_sphere = 0.2\r\n        const rad_bottom = (s_dbottom/2) / Math.sin(Math.PI * percent_sphere)\r\n        const bottom_dist = s_dbottom_h - (s_dbottom/2) / Math.tan(Math.PI * percent_sphere)\r\n\r\n        curved_bottom = <group>\r\n        <mesh position={[0,bottom_dist-0.1,0]}>\r\n            <sphereGeometry args={[rad_bottom, 20, 10, 0, Math.PI * 2, 0, Math.PI * percent_sphere]} />\r\n            <meshPhongMaterial color={basketStore.default_color} side={THREE.FrontSide}/>\r\n        </mesh>\r\n        <mesh position={[0,bottom_dist-0.1,0]}>\r\n            <sphereGeometry args={[rad_bottom, 20, 10, 0, Math.PI * 2, 0, Math.PI * percent_sphere]} />\r\n            <meshPhongMaterial color={basketStore.default_color} side = {THREE.BackSide} />\r\n        </mesh>\r\n        </group>\r\n    }\r\n\r\n    // const points = basketStore.updateCurvedPts()\r\n    const points = useMemo(() => basketStore.updateCurvedPts(true), [basketStore.cm]);\r\n\r\n    let [x_rot,changeXrot] = useState(0);\r\n    let [y_rot,changeYrot] = useState(0);\r\n    let [z_rot,changeZrot] = useState(0);\r\n    let [dist,changeDist] = useState(0);\r\n\r\n    const handleKeyDown = (event) => {\r\n        switch(event.key)\r\n        {\r\n            case \"x\":\r\n                    x_rot = x_rot + 0.1\r\n                    changeXrot(x_rot);\r\n                    break;\r\n            case \"y\": \r\n                    y_rot = y_rot + 0.1\r\n                    changeYrot(y_rot);\r\n                    break;\r\n            case \"z\": \r\n                    z_rot = z_rot + 0.1\r\n                    changeZrot(z_rot);\r\n                    break;\r\n            case \"w\": \r\n                    dist = Math.max(dist - 5,-300)\r\n                    changeDist(dist)\r\n                    break;\r\n            case \"q\": \r\n                    dist = Math.min(dist + 5,50)\r\n                    changeDist(dist)\r\n                    break;\r\n            case \" \": \r\n                    event.preventDefault()\r\n                    x_rot = 0\r\n                    y_rot = 0\r\n                    z_rot = 0 \r\n                    dist = 0\r\n                    changeXrot(x_rot)\r\n                    changeYrot(y_rot)\r\n                    changeZrot(z_rot)\r\n                    changeDist(dist)\r\n            default: \r\n                    break;\r\n        }\r\n    };\r\n    \r\n    React.useEffect(() => {\r\n        window.addEventListener('keydown', handleKeyDown);\r\n\r\n        // cleanup this component\r\n        return () => {\r\n            window.removeEventListener('keydown', handleKeyDown);\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        <group position={[0,-5,dist]} rotation={[x_rot,y_rot,z_rot]}> \r\n            {points.map((_, i) => (\r\n            <group key={i}>\r\n                <mesh >\r\n                    <latheGeometry args={[points[i], 30, 0, 2*Math.PI]}/>\r\n                    <meshPhongMaterial ref={el => itemsRef.current[i] = el} side={THREE.FrontSide} specular=\"#121212\" shininess = {26}/>\r\n                </mesh>\r\n                <mesh>\r\n                    <latheGeometry args={[points[i], 30, 0, 2*Math.PI]}/>\r\n                    <meshLambertMaterial color={basketStore.default_color} side = {THREE.BackSide} />\r\n                </mesh>\r\n            </group>   \r\n            ))}\r\n            {basketStore.lid && lid}\r\n            {basketStore.top_rim && top_rim_mesh}\r\n            {basketStore.bottom_rim && bottom_rim_mesh}\r\n            {basketStore.top_handle && handle}\r\n            {basketStore.side_handles && side_handles}\r\n            {!basketStore.curved_bottom && bottom_disk_mesh}\r\n            {basketStore.curved_bottom && curved_bottom}\r\n        </group>\r\n    )\r\n  }\r\n\r\nexport default observer(ResultBasket);",["368","369"],"C:\\Users\\Lina\\Downloads\\3D-O\\frontend\\src\\components\\ResultFigurine\\index.js",["370","371","372","373","374","375","376","377","378","379","380","381","382"],"import React, { useRef, useState, useMemo, useEffect} from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport * as THREE from \"three\";\r\n\r\nconst Figurine = (props) => {\r\n    const {figStore} = props\r\n    const itemsRef = useRef([]);\r\n\r\n    useEffect(() => {\r\n        itemsRef.current = itemsRef.current.slice(0, figStore.modelDimensions.length-1);\r\n     }, []);\r\n\r\n    useEffect(() => {\r\n        const len = figStore.modelDimensions.length-1\r\n        for(let i = 0; i < len; i += 1){\r\n            itemsRef.current[i].map = new THREE.TextureLoader().load(figStore.textures[i])\r\n            // console.log(figStore.textures[len-i-1])\r\n        }\r\n    }, [])\r\n\r\n    const texture_body = useMemo(() => new THREE.TextureLoader().load(figStore.textures[figStore.textures.length-1]), []) \r\n\r\n    const theta_len = 0.8\r\n    const goal_rad = (figStore.diameter * figStore.body_scale)/2\r\n    const head_rad = goal_rad/Math.sin((1-theta_len) * Math.PI)\r\n    const offset = head_rad*Math.cos((1-theta_len) * Math.PI) - 0.2\r\n\r\n    // const head =\r\n    // <group>\r\n    //     <mesh position={[0,(figStore.diameter * figStore.body_height) + offset,0]}>\r\n    //         <sphereGeometry args={[head_rad, 20, 14, 0, 2 * Math.PI, 0, Math.PI * theta_len]}/>\r\n    //         <meshPhongMaterial map = {texture_body}  side={THREE.FrontSide} specular=\"#121212\" shininess = {26}/>\r\n    //     </mesh>\r\n    //     <mesh position={[0,(figStore.diameter * figStore.body_height) + offset,0]}>\r\n    //         <sphereGeometry args={[head_rad, 20, 14, 0, 2 * Math.PI, 0, Math.PI * theta_len]}/>\r\n    //         <meshPhongMaterial map = {texture_body}  side={THREE.BackSide}/>\r\n    //     </mesh>\r\n    // </group>\r\n\r\n    const divs = figStore.getBrokenHeadPts(Math.PI*theta_len)\r\n\r\n    const broken_head = \r\n    divs.map((_, i) => (\r\n        <group key={i}>\r\n            <mesh position={[0,(figStore.diameter * figStore.body_height) + offset,0]}>\r\n                <sphereGeometry args={[head_rad, 20, 14, 0, 2 * Math.PI, divs[i][0], divs[i][1]]}/>\r\n                <meshPhongMaterial ref={el => itemsRef.current[i] = el} side={THREE.FrontSide} specular=\"#121212\" shininess = {26}/>\r\n            </mesh>\r\n            <mesh position={[0,(figStore.diameter * figStore.body_height) + offset,0]}>\r\n                <sphereGeometry args={[head_rad, 20, 14, 0, 2 * Math.PI, divs[i][0], divs[i][1]]}/>\r\n                <meshPhongMaterial color={figStore.default_color} side={THREE.BackSide}/>\r\n            </mesh>\r\n        </group>  \r\n    ))\r\n    \r\n    let bunny_ears = <mesh/>\r\n    let cat_ears = <mesh/> \r\n    let sphere_ears = <mesh/>\r\n    let bear_ears = <mesh/>\r\n    let arms = <mesh/>\r\n\r\n    class CustomCircleCurve extends THREE.Curve {\r\n        constructor(scale) {\r\n          super();\r\n          this.scale = scale;\r\n        }\r\n        getPoint(t) {\r\n          const tx = Math.cos(2 * Math.PI * t);\r\n          const ty = Math.max(-0.5, Math.sin(2 * Math.PI * t));\r\n          const tz = 0;\r\n          return new THREE.Vector3(tx, ty, tz).multiplyScalar(this.scale);\r\n        }\r\n    }\r\n\r\n    if(figStore.ears == \"bear\"){\r\n        const tube_scale = head_rad/3\r\n        const path = new CustomCircleCurve(tube_scale)\r\n        const segs = 40\r\n        const tube_rad = Math.min(0.5, tube_scale/7)\r\n        const rad_segs = 7\r\n        const closed = false\r\n        const y_pos = (figStore.diameter * figStore.body_height) + offset + tube_scale/4 + (head_rad * Math.cos(Math.PI/4))\r\n\r\n        bear_ears =  \r\n        <group>\r\n        <mesh position={[-(head_rad * Math.cos(Math.PI/4) + tube_scale/5),y_pos,0]} rotation={[0,0,Math.PI/4]} >\r\n            <tubeGeometry args={[path, segs, tube_rad, rad_segs, closed]} />\r\n            <meshPhongMaterial color={figStore.default_color} side = {THREE.FrontSide} />\r\n        </mesh>\r\n        <mesh position={[(head_rad * Math.cos(Math.PI/4) + tube_scale/5),y_pos,0]} rotation={[0,0,-Math.PI/4]}>\r\n            <tubeGeometry args={[path, segs, tube_rad, rad_segs, closed]} />\r\n            <meshPhongMaterial  color={figStore.default_color} side = {THREE.FrontSide} />\r\n        </mesh>\r\n        </group>\r\n    }\r\n\r\n    if(figStore.ears == \"cat\"){\r\n        const shape = new THREE.Shape();\r\n        const y_pos = (figStore.diameter * figStore.body_height) + offset + (head_rad * Math.cos(Math.PI/4))\r\n        const half_side_len = (head_rad/1.5)/2\r\n        shape.moveTo(-half_side_len,0);\r\n        shape.quadraticCurveTo(-half_side_len/1.2, half_side_len * 1.3, 0,half_side_len * 1.8);\r\n        shape.quadraticCurveTo(half_side_len/1.2, half_side_len * 1.3, half_side_len,0);\r\n        shape.lineTo(-half_side_len,0);\r\n\r\n        const extrudeSettings = {\r\n            steps: 1,  \r\n            depth: 1,  \r\n            bevelEnabled: false,  \r\n          };\r\n\r\n        cat_ears = \r\n        <group>\r\n        <mesh position={[(head_rad * Math.cos(Math.PI/4) - half_side_len/3),y_pos,0]} rotation={[0,0,-Math.PI/4.5]}>\r\n            <extrudeGeometry args={[shape, extrudeSettings]}/>\r\n            <meshPhongMaterial  color={figStore.default_color} side={THREE.FrontSide} specular=\"#121212\" shininess = {26}/>        \r\n        </mesh>\r\n        <mesh position={[-(head_rad * Math.cos(Math.PI/4) - half_side_len/3),y_pos,0]} rotation={[0,0,Math.PI/4.5]}>\r\n            <extrudeGeometry args={[shape, extrudeSettings]}/>\r\n            <meshPhongMaterial  color={figStore.default_color} side={THREE.FrontSide} specular=\"#121212\" shininess = {26}/>        \r\n        </mesh>\r\n        </group>\r\n\r\n    }\r\n\r\n    if(figStore.ears == \"bunny\"){\r\n        const bshape = new THREE.Shape();\r\n        const y_pos = (figStore.diameter * figStore.body_height) + offset + (head_rad * Math.cos(Math.PI/4))\r\n        const half_side_len = (head_rad/2)/2\r\n        bshape.moveTo(-half_side_len,0);\r\n        bshape.lineTo(-half_side_len, half_side_len * 3)\r\n        bshape.quadraticCurveTo(-half_side_len/2, (half_side_len * 4), 0,half_side_len * 4);\r\n        bshape.quadraticCurveTo(half_side_len/2, half_side_len * 4, half_side_len, half_side_len * 3);\r\n        bshape.lineTo(half_side_len,0);\r\n\r\n        const extrudeSettings = {\r\n            steps: 1,  \r\n            depth: 1,  \r\n            bevelEnabled: false,  \r\n          };\r\n\r\n        bunny_ears = \r\n        <group>\r\n        <mesh position={[(head_rad * Math.cos(Math.PI/4) - half_side_len/3),y_pos,0]} rotation={[0,0,-Math.PI/4]}>\r\n            <extrudeGeometry args={[bshape, extrudeSettings]}/>\r\n            <meshPhongMaterial  color={figStore.default_color} side={THREE.FrontSide} specular=\"#121212\" shininess = {26}/>        \r\n        </mesh>\r\n        <mesh position={[-(head_rad * Math.cos(Math.PI/4) - half_side_len/3),y_pos,0]} rotation={[0,0,Math.PI/4]}>\r\n            <extrudeGeometry args={[bshape, extrudeSettings]}/>\r\n            <meshPhongMaterial  color={figStore.default_color} side={THREE.FrontSide} specular=\"#121212\" shininess = {26}/>        \r\n        </mesh>\r\n        </group>\r\n    }\r\n\r\n    if(figStore.ears == \"sphere\"){\r\n        const ear_rad = head_rad/3.5\r\n        const y_pos = (figStore.diameter * figStore.body_height) + offset + ear_rad + (head_rad * Math.cos(Math.PI/4))\r\n        sphere_ears = \r\n        <group>\r\n            <mesh position={[-(head_rad * Math.cos(Math.PI/4)),y_pos,0]} rotation={[0,0,Math.PI/4]}>\r\n                <sphereGeometry args={[ear_rad, 20, 14, 0, 2 * Math.PI, 0, Math.PI ]}/>\r\n                <meshPhongMaterial  color={figStore.default_color} side={THREE.FrontSide} specular=\"#121212\" shininess = {26}/>\r\n            </mesh>\r\n            <mesh position={[(head_rad * Math.cos(Math.PI/4)),y_pos,0]} rotation={[0,0,-Math.PI/4]}>\r\n                <sphereGeometry args={[ear_rad, 20, 14, 0, 2 * Math.PI, 0, Math.PI ]}/>\r\n                <meshPhongMaterial  color={figStore.default_color} side={THREE.FrontSide} specular=\"#121212\" shininess = {26}/>\r\n            </mesh>\r\n        </group>\r\n    }\r\n\r\n    if (figStore.arms){\r\n        const arm_rad = figStore.diameter/7\r\n        const y_pos = (figStore.diameter * figStore.body_height)/2\r\n        const x_pos = (figStore.diameter * figStore.body_scale)/2 + arm_rad*1.3\r\n        arms = \r\n        <group>\r\n            <mesh position={[-(x_pos),y_pos,0]} rotation={[0,0,Math.PI/2.65]}>\r\n                <cylinderGeometry args={[arm_rad, arm_rad, arm_rad*1.3, 15]} />\r\n                <meshPhongMaterial  color={figStore.default_color} side={THREE.FrontSide} specular=\"#121212\" shininess = {26}/>\r\n            </mesh>\r\n            <mesh position={[x_pos,y_pos,0]} rotation={[0,0,-Math.PI/2.65]}>\r\n                <cylinderGeometry args={[arm_rad, arm_rad, arm_rad*1.3, 15]} />\r\n                <meshPhongMaterial  color={figStore.default_color} side={THREE.FrontSide} specular=\"#121212\" shininess = {26}/>\r\n            </mesh>\r\n        </group>\r\n    }\r\n\r\n    const points = figStore.updateCurvedPts()\r\n\r\n    let [x_rot,changeXrot] = useState(0);\r\n    let [y_rot,changeYrot] = useState(0);\r\n    let [z_rot,changeZrot] = useState(0);\r\n    let [dist,changeDist] = useState(0);\r\n\r\n    const handleKeyDown = (event) => {\r\n        switch(event.key)\r\n        {\r\n            case \"x\":\r\n                    x_rot = x_rot + 0.1\r\n                    changeXrot(x_rot);\r\n                    break;\r\n            case \"y\": \r\n                    y_rot = y_rot + 0.1\r\n                    changeYrot(y_rot);\r\n                    break;\r\n            case \"z\": \r\n                    z_rot = z_rot + 0.1\r\n                    changeZrot(z_rot);\r\n                    break;\r\n            case \"w\": \r\n                    dist = Math.max(dist - 5,-300)\r\n                    changeDist(dist)\r\n                    break;\r\n            case \"q\": \r\n                    dist = Math.min(dist + 5,50)\r\n                    changeDist(dist)\r\n                    break;\r\n            case \" \": \r\n                    event.preventDefault()\r\n                    x_rot = 0\r\n                    y_rot = 0\r\n                    z_rot = 0 \r\n                    dist = 0\r\n                    changeXrot(x_rot)\r\n                    changeYrot(y_rot)\r\n                    changeZrot(z_rot)\r\n                    changeDist(dist)\r\n            default: \r\n                    break;\r\n        }\r\n    };\r\n    \r\n    React.useEffect(() => {\r\n        window.addEventListener('keydown', handleKeyDown);\r\n\r\n        // cleanup this component\r\n        return () => {\r\n            window.removeEventListener('keydown', handleKeyDown);\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        <group position={[0,-7,dist]} rotation={[x_rot,y_rot,z_rot]}> \r\n            <mesh >\r\n                <latheGeometry args={[points, 30, 0, 2*Math.PI]}/>\r\n                <meshPhongMaterial map = {texture_body}  side={THREE.FrontSide} specular=\"#121212\" shininess = {26}/>\r\n            </mesh>\r\n            <mesh>\r\n                <latheGeometry args={[points, 30, 0, 2*Math.PI]}/>\r\n                <meshPhongMaterial map = {texture_body}  side = {THREE.BackSide} />\r\n            </mesh>\r\n            {broken_head}\r\n            {figStore.ears == \"bear\" && bear_ears}\r\n            {figStore.ears == \"bunny\" && bunny_ears}\r\n            {figStore.ears == \"cat\" && cat_ears}\r\n            {figStore.ears == \"sphere\" && sphere_ears}\r\n            {figStore.arms && arms}\r\n        </group>\r\n    )\r\n  }\r\n\r\nexport default observer(Figurine);","C:\\Users\\Lina\\Downloads\\3D-O\\frontend\\src\\components\\TriangleSection\\index.js",["383"],"C:\\Users\\Lina\\Downloads\\3D-O\\frontend\\src\\components\\UntrackedPixel\\index.js",["384","385","386"],"import React, { useEffect, useState, useRef} from \"react\";\r\nimport \"../Pixel/pixel.css\";\r\nimport { observer } from \"mobx-react\";\r\n\r\nconst UntrackedPixel = (props) => {\r\n  const {formObject, inverted} = props;\r\n\r\n  const [pixelColor, setPixelColor] = useState(\"#FFFFFF\");\r\n  const [oldColor, setOldColor] = useState(pixelColor);\r\n  const [canChangeColor, setCanChangeColor] = useState(true);\r\n\r\n  function borderColor(defaultColor) {\r\n    var color = defaultColor.substring(2, 8);\r\n    var r = parseInt(color.substring(0, 2), 16); // hexToR\r\n    var g = parseInt(color.substring(2, 4), 16); // hexToG\r\n    var b = parseInt(color.substring(4, 6), 16); // hexToB\r\n    return (((r * 0.299) + (g * 0.587) + (b * 0.114)) > 90) ?\r\n      \"#000000\" : \"#FFFFFF\";\r\n  }\r\n\r\n  useEffect(()=>{\r\n    if(formObject.clear) {\r\n      setPixelColor(formObject.defaultColor)\r\n    }\r\n    else if (pixelColor == formObject.oldDefault) setPixelColor(formObject.defaultColor)\r\n  }, [formObject.defaultColor])\r\n\r\n\r\n  function applyColor() {\r\n    formObject.unsetClear();\r\n    setPixelColor(formObject.selectedColor);\r\n    setCanChangeColor(false);\r\n  }\r\n\r\n  function applyColorSpray() {\r\n    if (formObject.mode){\r\n      applyColor()\r\n    }\r\n  }\r\n\r\n  function changeColorOnHover() {\r\n    setOldColor(pixelColor);\r\n    setPixelColor(formObject.selectedColor);\r\n  }\r\n\r\n  function resetColor() {\r\n    if (canChangeColor) {\r\n      setPixelColor(oldColor);\r\n    }\r\n\r\n    setCanChangeColor(true);\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className=\"pixel\"\r\n      onClick={applyColor}\r\n      onMouseEnter={changeColorOnHover}\r\n      onMouseLeave={resetColor}\r\n      onMouseOver={applyColorSpray}\r\n      style={{ background: pixelColor, width: 20, borderColor: borderColor(formObject.defaultColor), borderStyle: inverted ? \"dashed\" : \"solid\"}}\r\n    ></div>\r\n  );\r\n\r\n}\r\n\r\nexport default observer(UntrackedPixel);","C:\\Users\\Lina\\Downloads\\3D-O\\frontend\\src\\components\\UntrackedRow\\index.js",["387"],{"ruleId":"388","severity":1,"message":"389","line":5,"column":3,"nodeType":"390","messageId":"391","endLine":5,"endColumn":7},{"ruleId":"388","severity":1,"message":"392","line":7,"column":3,"nodeType":"390","messageId":"391","endLine":7,"endColumn":9},{"ruleId":"388","severity":1,"message":"393","line":8,"column":3,"nodeType":"390","messageId":"391","endLine":8,"endColumn":13},{"ruleId":"394","replacedBy":"395"},{"ruleId":"396","replacedBy":"397"},{"ruleId":"394","replacedBy":"398"},{"ruleId":"396","replacedBy":"399"},{"ruleId":"388","severity":1,"message":"400","line":8,"column":22,"nodeType":"390","messageId":"391","endLine":8,"endColumn":26},{"ruleId":"401","severity":1,"message":"402","line":28,"column":31,"nodeType":"403","messageId":"404","endLine":28,"endColumn":33},{"ruleId":"401","severity":1,"message":"402","line":29,"column":31,"nodeType":"403","messageId":"404","endLine":29,"endColumn":33},{"ruleId":"401","severity":1,"message":"402","line":30,"column":36,"nodeType":"403","messageId":"404","endLine":30,"endColumn":38},{"ruleId":"401","severity":1,"message":"402","line":31,"column":36,"nodeType":"403","messageId":"404","endLine":31,"endColumn":38},{"ruleId":"401","severity":1,"message":"402","line":71,"column":31,"nodeType":"403","messageId":"404","endLine":71,"endColumn":33},{"ruleId":"388","severity":1,"message":"405","line":1,"column":16,"nodeType":"390","messageId":"391","endLine":1,"endColumn":25},{"ruleId":"401","severity":1,"message":"402","line":14,"column":31,"nodeType":"403","messageId":"404","endLine":14,"endColumn":33},{"ruleId":"388","severity":1,"message":"406","line":1,"column":28,"nodeType":"390","messageId":"391","endLine":1,"endColumn":36},{"ruleId":"388","severity":1,"message":"407","line":1,"column":38,"nodeType":"390","messageId":"391","endLine":1,"endColumn":44},{"ruleId":"401","severity":1,"message":"402","line":25,"column":33,"nodeType":"403","messageId":"404","endLine":25,"endColumn":35},{"ruleId":"408","severity":1,"message":"409","line":26,"column":6,"nodeType":"410","endLine":26,"endColumn":31,"suggestions":"411"},{"ruleId":"388","severity":1,"message":"412","line":53,"column":7,"nodeType":"390","messageId":"391","endLine":53,"endColumn":27},{"ruleId":"401","severity":1,"message":"402","line":82,"column":17,"nodeType":"403","messageId":"404","endLine":82,"endColumn":19},{"ruleId":"401","severity":1,"message":"402","line":92,"column":29,"nodeType":"403","messageId":"404","endLine":92,"endColumn":31},{"ruleId":"401","severity":1,"message":"402","line":15,"column":26,"nodeType":"403","messageId":"404","endLine":15,"endColumn":28},{"ruleId":"401","severity":1,"message":"402","line":102,"column":28,"nodeType":"403","messageId":"404","endLine":102,"endColumn":30},{"ruleId":"401","severity":1,"message":"402","line":113,"column":44,"nodeType":"403","messageId":"404","endLine":113,"endColumn":46},{"ruleId":"401","severity":1,"message":"402","line":17,"column":22,"nodeType":"403","messageId":"404","endLine":17,"endColumn":24},{"ruleId":"401","severity":1,"message":"402","line":21,"column":27,"nodeType":"403","messageId":"404","endLine":21,"endColumn":29},{"ruleId":"401","severity":1,"message":"402","line":24,"column":18,"nodeType":"403","messageId":"404","endLine":24,"endColumn":20},{"ruleId":"401","severity":1,"message":"402","line":24,"column":43,"nodeType":"403","messageId":"404","endLine":24,"endColumn":45},{"ruleId":"388","severity":1,"message":"405","line":2,"column":25,"nodeType":"390","messageId":"391","endLine":2,"endColumn":34},{"ruleId":"401","severity":1,"message":"402","line":19,"column":24,"nodeType":"403","messageId":"404","endLine":19,"endColumn":26},{"ruleId":"401","severity":1,"message":"413","line":41,"column":24,"nodeType":"403","messageId":"404","endLine":41,"endColumn":26},{"ruleId":"401","severity":1,"message":"402","line":43,"column":52,"nodeType":"403","messageId":"404","endLine":43,"endColumn":54},{"ruleId":"401","severity":1,"message":"402","line":51,"column":13,"nodeType":"403","messageId":"404","endLine":51,"endColumn":15},{"ruleId":"401","severity":1,"message":"402","line":61,"column":38,"nodeType":"403","messageId":"404","endLine":61,"endColumn":40},{"ruleId":"401","severity":1,"message":"402","line":68,"column":38,"nodeType":"403","messageId":"404","endLine":68,"endColumn":40},{"ruleId":"401","severity":1,"message":"402","line":78,"column":27,"nodeType":"403","messageId":"404","endLine":78,"endColumn":29},{"ruleId":"388","severity":1,"message":"414","line":13,"column":10,"nodeType":"390","messageId":"391","endLine":13,"endColumn":30},{"ruleId":"388","severity":1,"message":"415","line":17,"column":9,"nodeType":"390","messageId":"391","endLine":17,"endColumn":14},{"ruleId":"401","severity":1,"message":"402","line":21,"column":31,"nodeType":"403","messageId":"404","endLine":21,"endColumn":33},{"ruleId":"401","severity":1,"message":"402","line":22,"column":31,"nodeType":"403","messageId":"404","endLine":22,"endColumn":33},{"ruleId":"401","severity":1,"message":"402","line":23,"column":36,"nodeType":"403","messageId":"404","endLine":23,"endColumn":38},{"ruleId":"401","severity":1,"message":"402","line":24,"column":36,"nodeType":"403","messageId":"404","endLine":24,"endColumn":38},{"ruleId":"401","severity":1,"message":"402","line":54,"column":97,"nodeType":"403","messageId":"404","endLine":54,"endColumn":99},{"ruleId":"408","severity":1,"message":"416","line":62,"column":6,"nodeType":"410","endLine":62,"endColumn":8,"suggestions":"417"},{"ruleId":"401","severity":1,"message":"402","line":76,"column":38,"nodeType":"403","messageId":"404","endLine":76,"endColumn":40},{"ruleId":"401","severity":1,"message":"402","line":77,"column":38,"nodeType":"403","messageId":"404","endLine":77,"endColumn":40},{"ruleId":"401","severity":1,"message":"402","line":78,"column":38,"nodeType":"403","messageId":"404","endLine":78,"endColumn":40},{"ruleId":"401","severity":1,"message":"402","line":79,"column":38,"nodeType":"403","messageId":"404","endLine":79,"endColumn":40},{"ruleId":"418","severity":1,"message":"419","line":83,"column":13,"nodeType":"420","endLine":83,"endColumn":16},{"ruleId":"421","severity":1,"message":"422","line":89,"column":9,"nodeType":"420","endLine":89,"endColumn":75},{"ruleId":"421","severity":1,"message":"422","line":98,"column":9,"nodeType":"420","endLine":98,"endColumn":56},{"ruleId":"388","severity":1,"message":"423","line":16,"column":27,"nodeType":"390","messageId":"391","endLine":16,"endColumn":33},{"ruleId":"394","replacedBy":"424"},{"ruleId":"396","replacedBy":"425"},{"ruleId":"388","severity":1,"message":"406","line":1,"column":17,"nodeType":"390","messageId":"391","endLine":1,"endColumn":25},{"ruleId":"394","replacedBy":"426"},{"ruleId":"396","replacedBy":"427"},{"ruleId":"394","replacedBy":"428"},{"ruleId":"396","replacedBy":"429"},{"ruleId":"388","severity":1,"message":"430","line":3,"column":8,"nodeType":"390","messageId":"391","endLine":3,"endColumn":13},{"ruleId":"421","severity":1,"message":"422","line":17,"column":9,"nodeType":"420","endLine":17,"endColumn":48},{"ruleId":"421","severity":1,"message":"422","line":18,"column":9,"nodeType":"420","endLine":18,"endColumn":48},{"ruleId":"421","severity":1,"message":"422","line":19,"column":9,"nodeType":"420","endLine":19,"endColumn":48},{"ruleId":"394","replacedBy":"431"},{"ruleId":"396","replacedBy":"432"},{"ruleId":"394","replacedBy":"433"},{"ruleId":"396","replacedBy":"434"},{"ruleId":"394","replacedBy":"435"},{"ruleId":"396","replacedBy":"436"},{"ruleId":"394","replacedBy":"437"},{"ruleId":"396","replacedBy":"438"},{"ruleId":"388","severity":1,"message":"405","line":1,"column":16,"nodeType":"390","messageId":"391","endLine":1,"endColumn":25},{"ruleId":"388","severity":1,"message":"439","line":10,"column":33,"nodeType":"390","messageId":"391","endLine":10,"endColumn":39},{"ruleId":"388","severity":1,"message":"440","line":10,"column":41,"nodeType":"390","messageId":"391","endLine":10,"endColumn":46},{"ruleId":"401","severity":1,"message":"402","line":64,"column":12,"nodeType":"403","messageId":"404","endLine":64,"endColumn":14},{"ruleId":"401","severity":1,"message":"402","line":64,"column":28,"nodeType":"403","messageId":"404","endLine":64,"endColumn":30},{"ruleId":"418","severity":1,"message":"419","line":339,"column":13,"nodeType":"420","endLine":339,"endColumn":16},{"ruleId":"388","severity":1,"message":"405","line":1,"column":16,"nodeType":"390","messageId":"391","endLine":1,"endColumn":25},{"ruleId":"388","severity":1,"message":"439","line":10,"column":33,"nodeType":"390","messageId":"391","endLine":10,"endColumn":39},{"ruleId":"388","severity":1,"message":"440","line":10,"column":41,"nodeType":"390","messageId":"391","endLine":10,"endColumn":46},{"ruleId":"418","severity":1,"message":"419","line":259,"column":13,"nodeType":"420","endLine":259,"endColumn":16},{"ruleId":"388","severity":1,"message":"441","line":55,"column":10,"nodeType":"390","messageId":"391","endLine":55,"endColumn":24},{"ruleId":"401","severity":1,"message":"402","line":236,"column":33,"nodeType":"403","messageId":"404","endLine":236,"endColumn":35},{"ruleId":"401","severity":1,"message":"402","line":236,"column":67,"nodeType":"403","messageId":"404","endLine":236,"endColumn":69},{"ruleId":"388","severity":1,"message":"407","line":1,"column":17,"nodeType":"390","messageId":"391","endLine":1,"endColumn":23},{"ruleId":"388","severity":1,"message":"405","line":1,"column":44,"nodeType":"390","messageId":"391","endLine":1,"endColumn":53},{"ruleId":"388","severity":1,"message":"442","line":2,"column":9,"nodeType":"390","messageId":"391","endLine":2,"endColumn":17},{"ruleId":"443","severity":1,"message":"444","line":110,"column":13,"nodeType":"445","messageId":"446","endLine":111,"endColumn":27},{"ruleId":"408","severity":1,"message":"447","line":122,"column":8,"nodeType":"410","endLine":122,"endColumn":10,"suggestions":"448"},{"ruleId":"394","replacedBy":"449"},{"ruleId":"396","replacedBy":"450"},{"ruleId":"388","severity":1,"message":"405","line":1,"column":16,"nodeType":"390","messageId":"391","endLine":1,"endColumn":25},{"ruleId":"388","severity":1,"message":"439","line":10,"column":33,"nodeType":"390","messageId":"391","endLine":10,"endColumn":39},{"ruleId":"388","severity":1,"message":"440","line":10,"column":41,"nodeType":"390","messageId":"391","endLine":10,"endColumn":46},{"ruleId":"418","severity":1,"message":"419","line":178,"column":13,"nodeType":"420","endLine":178,"endColumn":16},{"ruleId":"388","severity":1,"message":"451","line":1,"column":17,"nodeType":"390","messageId":"391","endLine":1,"endColumn":30},{"ruleId":"388","severity":1,"message":"452","line":1,"column":32,"nodeType":"390","messageId":"391","endLine":1,"endColumn":42},{"ruleId":"388","severity":1,"message":"453","line":2,"column":8,"nodeType":"390","messageId":"391","endLine":2,"endColumn":17},{"ruleId":"408","severity":1,"message":"454","line":11,"column":9,"nodeType":"410","endLine":11,"endColumn":11,"suggestions":"455"},{"ruleId":"408","severity":1,"message":"456","line":19,"column":8,"nodeType":"410","endLine":19,"endColumn":10,"suggestions":"457"},{"ruleId":"408","severity":1,"message":"458","line":46,"column":67,"nodeType":"410","endLine":46,"endColumn":81,"suggestions":"459"},{"ruleId":"443","severity":1,"message":"444","line":93,"column":13,"nodeType":"445","messageId":"446","endLine":94,"endColumn":27},{"ruleId":"408","severity":1,"message":"447","line":105,"column":8,"nodeType":"410","endLine":105,"endColumn":10,"suggestions":"460"},{"ruleId":"388","severity":1,"message":"439","line":10,"column":33,"nodeType":"390","messageId":"391","endLine":10,"endColumn":39},{"ruleId":"388","severity":1,"message":"440","line":10,"column":41,"nodeType":"390","messageId":"391","endLine":10,"endColumn":46},{"ruleId":"408","severity":1,"message":"461","line":22,"column":6,"nodeType":"410","endLine":22,"endColumn":23,"suggestions":"462"},{"ruleId":"418","severity":1,"message":"419","line":168,"column":13,"nodeType":"420","endLine":168,"endColumn":16},{"ruleId":"463","severity":1,"message":"464","line":122,"column":5,"nodeType":"465","messageId":"404","endLine":122,"endColumn":13},{"ruleId":"463","severity":1,"message":"466","line":125,"column":5,"nodeType":"465","messageId":"404","endLine":125,"endColumn":20},{"ruleId":"401","severity":1,"message":"402","line":157,"column":33,"nodeType":"403","messageId":"404","endLine":157,"endColumn":35},{"ruleId":"401","severity":1,"message":"402","line":157,"column":67,"nodeType":"403","messageId":"404","endLine":157,"endColumn":69},{"ruleId":"388","severity":1,"message":"407","line":1,"column":17,"nodeType":"390","messageId":"391","endLine":1,"endColumn":23},{"ruleId":"388","severity":1,"message":"405","line":1,"column":44,"nodeType":"390","messageId":"391","endLine":1,"endColumn":53},{"ruleId":"443","severity":1,"message":"444","line":197,"column":13,"nodeType":"445","messageId":"446","endLine":198,"endColumn":27},{"ruleId":"408","severity":1,"message":"447","line":209,"column":8,"nodeType":"410","endLine":209,"endColumn":10,"suggestions":"467"},{"ruleId":"388","severity":1,"message":"407","line":1,"column":17,"nodeType":"390","messageId":"391","endLine":1,"endColumn":23},{"ruleId":"388","severity":1,"message":"405","line":1,"column":44,"nodeType":"390","messageId":"391","endLine":1,"endColumn":53},{"ruleId":"388","severity":1,"message":"468","line":5,"column":8,"nodeType":"390","messageId":"391","endLine":5,"endColumn":12},{"ruleId":"401","severity":1,"message":"402","line":59,"column":22,"nodeType":"403","messageId":"404","endLine":59,"endColumn":24},{"ruleId":"401","severity":1,"message":"402","line":81,"column":22,"nodeType":"403","messageId":"404","endLine":81,"endColumn":24},{"ruleId":"401","severity":1,"message":"402","line":110,"column":22,"nodeType":"403","messageId":"404","endLine":110,"endColumn":24},{"ruleId":"401","severity":1,"message":"402","line":139,"column":22,"nodeType":"403","messageId":"404","endLine":139,"endColumn":24},{"ruleId":"443","severity":1,"message":"444","line":213,"column":13,"nodeType":"445","messageId":"446","endLine":214,"endColumn":27},{"ruleId":"408","severity":1,"message":"447","line":225,"column":8,"nodeType":"410","endLine":225,"endColumn":10,"suggestions":"469"},{"ruleId":"401","severity":1,"message":"402","line":239,"column":28,"nodeType":"403","messageId":"404","endLine":239,"endColumn":30},{"ruleId":"401","severity":1,"message":"402","line":240,"column":28,"nodeType":"403","messageId":"404","endLine":240,"endColumn":30},{"ruleId":"401","severity":1,"message":"402","line":241,"column":28,"nodeType":"403","messageId":"404","endLine":241,"endColumn":30},{"ruleId":"401","severity":1,"message":"402","line":242,"column":28,"nodeType":"403","messageId":"404","endLine":242,"endColumn":30},{"ruleId":"388","severity":1,"message":"470","line":1,"column":10,"nodeType":"390","messageId":"391","endLine":1,"endColumn":22},{"ruleId":"463","severity":1,"message":"464","line":92,"column":5,"nodeType":"465","messageId":"404","endLine":92,"endColumn":13},{"ruleId":"463","severity":1,"message":"466","line":95,"column":5,"nodeType":"465","messageId":"404","endLine":95,"endColumn":20},{"ruleId":"388","severity":1,"message":"407","line":1,"column":17,"nodeType":"390","messageId":"391","endLine":1,"endColumn":23},{"ruleId":"388","severity":1,"message":"406","line":1,"column":25,"nodeType":"390","messageId":"391","endLine":1,"endColumn":33},{"ruleId":"388","severity":1,"message":"405","line":1,"column":44,"nodeType":"390","messageId":"391","endLine":1,"endColumn":53},{"ruleId":"388","severity":1,"message":"471","line":4,"column":8,"nodeType":"390","messageId":"391","endLine":4,"endColumn":12},{"ruleId":"408","severity":1,"message":"472","line":8,"column":83,"nodeType":"410","endLine":8,"endColumn":85,"suggestions":"473"},{"ruleId":"401","severity":1,"message":"402","line":11,"column":17,"nodeType":"403","messageId":"404","endLine":11,"endColumn":19},{"ruleId":"401","severity":1,"message":"402","line":40,"column":22,"nodeType":"403","messageId":"404","endLine":40,"endColumn":24},{"ruleId":"401","severity":1,"message":"402","line":49,"column":22,"nodeType":"403","messageId":"404","endLine":49,"endColumn":24},{"ruleId":"388","severity":1,"message":"470","line":1,"column":10,"nodeType":"390","messageId":"391","endLine":1,"endColumn":22},{"ruleId":"463","severity":1,"message":"466","line":88,"column":5,"nodeType":"465","messageId":"404","endLine":88,"endColumn":20},{"ruleId":"388","severity":1,"message":"407","line":1,"column":17,"nodeType":"390","messageId":"391","endLine":1,"endColumn":23},{"ruleId":"388","severity":1,"message":"405","line":1,"column":44,"nodeType":"390","messageId":"391","endLine":1,"endColumn":53},{"ruleId":"408","severity":1,"message":"474","line":10,"column":74,"nodeType":"410","endLine":10,"endColumn":76,"suggestions":"475"},{"ruleId":"408","severity":1,"message":"476","line":185,"column":53,"nodeType":"410","endLine":185,"endColumn":73,"suggestions":"477"},{"ruleId":"443","severity":1,"message":"444","line":252,"column":13,"nodeType":"445","messageId":"446","endLine":253,"endColumn":27},{"ruleId":"408","severity":1,"message":"447","line":264,"column":8,"nodeType":"410","endLine":264,"endColumn":10,"suggestions":"478"},{"ruleId":"408","severity":1,"message":"479","line":11,"column":9,"nodeType":"410","endLine":11,"endColumn":11,"suggestions":"480"},{"ruleId":"408","severity":1,"message":"481","line":19,"column":8,"nodeType":"410","endLine":19,"endColumn":10,"suggestions":"482"},{"ruleId":"388","severity":1,"message":"483","line":28,"column":11,"nodeType":"390","messageId":"391","endLine":28,"endColumn":21},{"ruleId":"388","severity":1,"message":"484","line":29,"column":11,"nodeType":"390","messageId":"391","endLine":29,"endColumn":23},{"ruleId":"408","severity":1,"message":"485","line":156,"column":69,"nodeType":"410","endLine":156,"endColumn":85,"suggestions":"486"},{"ruleId":"443","severity":1,"message":"444","line":196,"column":13,"nodeType":"445","messageId":"446","endLine":197,"endColumn":27},{"ruleId":"408","severity":1,"message":"447","line":208,"column":8,"nodeType":"410","endLine":208,"endColumn":10,"suggestions":"487"},{"ruleId":"394","replacedBy":"488"},{"ruleId":"396","replacedBy":"489"},{"ruleId":"408","severity":1,"message":"490","line":11,"column":9,"nodeType":"410","endLine":11,"endColumn":11,"suggestions":"491"},{"ruleId":"408","severity":1,"message":"492","line":19,"column":8,"nodeType":"410","endLine":19,"endColumn":10,"suggestions":"493"},{"ruleId":"408","severity":1,"message":"494","line":21,"column":119,"nodeType":"410","endLine":21,"endColumn":121,"suggestions":"495"},{"ruleId":"401","severity":1,"message":"402","line":75,"column":22,"nodeType":"403","messageId":"404","endLine":75,"endColumn":24},{"ruleId":"401","severity":1,"message":"402","line":97,"column":22,"nodeType":"403","messageId":"404","endLine":97,"endColumn":24},{"ruleId":"401","severity":1,"message":"402","line":126,"column":22,"nodeType":"403","messageId":"404","endLine":126,"endColumn":24},{"ruleId":"401","severity":1,"message":"402","line":155,"column":22,"nodeType":"403","messageId":"404","endLine":155,"endColumn":24},{"ruleId":"443","severity":1,"message":"444","line":228,"column":13,"nodeType":"445","messageId":"446","endLine":229,"endColumn":27},{"ruleId":"408","severity":1,"message":"447","line":240,"column":8,"nodeType":"410","endLine":240,"endColumn":10,"suggestions":"496"},{"ruleId":"401","severity":1,"message":"402","line":253,"column":28,"nodeType":"403","messageId":"404","endLine":253,"endColumn":30},{"ruleId":"401","severity":1,"message":"402","line":254,"column":28,"nodeType":"403","messageId":"404","endLine":254,"endColumn":30},{"ruleId":"401","severity":1,"message":"402","line":255,"column":28,"nodeType":"403","messageId":"404","endLine":255,"endColumn":30},{"ruleId":"401","severity":1,"message":"402","line":256,"column":28,"nodeType":"403","messageId":"404","endLine":256,"endColumn":30},{"ruleId":"388","severity":1,"message":"405","line":2,"column":25,"nodeType":"390","messageId":"391","endLine":2,"endColumn":34},{"ruleId":"388","severity":1,"message":"407","line":1,"column":38,"nodeType":"390","messageId":"391","endLine":1,"endColumn":44},{"ruleId":"401","severity":1,"message":"402","line":25,"column":25,"nodeType":"403","messageId":"404","endLine":25,"endColumn":27},{"ruleId":"408","severity":1,"message":"497","line":26,"column":6,"nodeType":"410","endLine":26,"endColumn":31,"suggestions":"498"},{"ruleId":"388","severity":1,"message":"405","line":1,"column":16,"nodeType":"390","messageId":"391","endLine":1,"endColumn":25},"no-unused-vars","'Bars' is defined but never used.","Identifier","unusedVar","'NavBtn' is defined but never used.","'NavBtnLink' is defined but never used.","no-native-reassign",["499"],"no-negated-in-lhs",["500"],["499"],["500"],"'Link' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useEffect' is defined but never used.","'useState' is defined but never used.","'useRef' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'PxModel', 'formObject.clear', and 'formObject.oldDefault'. Either include them or remove the dependency array.","ArrayExpression",["501"],"'exportComponentAsPNG' is assigned a value but never used.","Expected '!==' and instead saw '!='.","'exportComponentAsPNG' is defined but never used.","'model' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'coloringFormStore.coloringFormData', 'coloringFormStore.defaultColor', and 'modelStore'. Either include them or remove the dependency array.",["502"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'Router' is defined but never used.",["499"],["500"],["499"],["500"],["499"],["500"],"'bgOff' is defined but never used.",["499"],["500"],["499"],["500"],["499"],["500"],["499"],["500"],"'Tracks' is defined but never used.","'Ticks' is defined but never used.","'getCurvePoints' is defined but never used.","'useFrame' is defined but never used.","no-fallthrough","Expected a 'break' statement before 'default'.","SwitchCase","default","React Hook React.useEffect has a missing dependency: 'handleKeyDown'. Either include it or remove the dependency array.",["503"],["499"],["500"],"'createContext' is defined but never used.","'useContext' is defined but never used.","'RootStore' is defined but never used.","React Hook useEffect has a missing dependency: 'vaseStore.modelDimensions.length'. Either include it or remove the dependency array.",["504"],"React Hook useEffect has missing dependencies: 'vaseStore.modelDimensions.length' and 'vaseStore.textures'. Either include them or remove the dependency array.",["505"],"React Hook useMemo has a missing dependency: 'vaseStore'. Either include it or remove the dependency array.",["506"],["507"],"React Hook useEffect has a missing dependency: 'coloringFormStore'. Either include it or remove the dependency array.",["508"],"no-dupe-keys","Duplicate key 'storePic'.","ObjectExpression","Duplicate key 'setDefaultColor'.",["509"],"'Wing' is defined but never used.",["510"],"'tryReference' is defined but never used.","'grid' is defined but never used.","React Hook useMemo has a missing dependency: 'vertices'. Either include it or remove the dependency array.",["511"],"React Hook useMemo has a missing dependency: 'image'. Either include it or remove the dependency array.",["512"],"React Hook useMemo has an unnecessary dependency: 'swanStore.diameter'. Either exclude it or remove the dependency array.",["513"],["514"],"React Hook useEffect has a missing dependency: 'basketStore.modelDimensions.length'. Either include it or remove the dependency array.",["515"],"React Hook useEffect has missing dependencies: 'basketStore.modelDimensions.length' and 'basketStore.textures'. Either include them or remove the dependency array.",["516"],"'s_diameter' is assigned a value but never used.","'s_diameter_h' is assigned a value but never used.","React Hook useMemo has a missing dependency: 'basketStore'. Either include it or remove the dependency array.",["517"],["518"],["499"],["500"],"React Hook useEffect has a missing dependency: 'figStore.modelDimensions.length'. Either include it or remove the dependency array.",["519"],"React Hook useEffect has missing dependencies: 'figStore.modelDimensions.length' and 'figStore.textures'. Either include them or remove the dependency array.",["520"],"React Hook useMemo has a missing dependency: 'figStore.textures'. Either include it or remove the dependency array.",["521"],["522"],"React Hook useEffect has missing dependencies: 'formObject.clear', 'formObject.oldDefault', and 'pixelColor'. Either include them or remove the dependency array.",["523"],"no-global-assign","no-unsafe-negation",{"desc":"524","fix":"525"},{"desc":"526","fix":"527"},{"desc":"528","fix":"529"},{"desc":"530","fix":"531"},{"desc":"532","fix":"533"},{"desc":"534","fix":"535"},{"desc":"528","fix":"536"},{"desc":"537","fix":"538"},{"desc":"528","fix":"539"},{"desc":"528","fix":"540"},{"desc":"541","fix":"542"},{"desc":"543","fix":"544"},{"desc":"545","fix":"546"},{"desc":"528","fix":"547"},{"desc":"548","fix":"549"},{"desc":"550","fix":"551"},{"desc":"552","fix":"553"},{"desc":"528","fix":"554"},{"desc":"555","fix":"556"},{"desc":"557","fix":"558"},{"desc":"559","fix":"560"},{"desc":"528","fix":"561"},{"desc":"562","fix":"563"},"Update the dependencies array to be: [PxModel, formObject.clear, formObject.defaultColor, formObject.oldDefault]",{"range":"564","text":"565"},"Update the dependencies array to be: [coloringFormStore.coloringFormData, coloringFormStore.defaultColor, modelStore]",{"range":"566","text":"567"},"Update the dependencies array to be: [handleKeyDown]",{"range":"568","text":"569"},"Update the dependencies array to be: [vaseStore.modelDimensions.length]",{"range":"570","text":"571"},"Update the dependencies array to be: [vaseStore.modelDimensions.length, vaseStore.textures]",{"range":"572","text":"573"},"Update the dependencies array to be: [vaseStore]",{"range":"574","text":"575"},{"range":"576","text":"569"},"Update the dependencies array to be: [coloringFormStore, swanStore.wings]",{"range":"577","text":"578"},{"range":"579","text":"569"},{"range":"580","text":"569"},"Update the dependencies array to be: [vertices]",{"range":"581","text":"582"},"Update the dependencies array to be: [image]",{"range":"583","text":"584"},"Update the dependencies array to be: []",{"range":"585","text":"586"},{"range":"587","text":"569"},"Update the dependencies array to be: [basketStore.modelDimensions.length]",{"range":"588","text":"589"},"Update the dependencies array to be: [basketStore.modelDimensions.length, basketStore.textures]",{"range":"590","text":"591"},"Update the dependencies array to be: [basketStore]",{"range":"592","text":"593"},{"range":"594","text":"569"},"Update the dependencies array to be: [figStore.modelDimensions.length]",{"range":"595","text":"596"},"Update the dependencies array to be: [figStore.modelDimensions.length, figStore.textures]",{"range":"597","text":"598"},"Update the dependencies array to be: [figStore.textures]",{"range":"599","text":"600"},{"range":"601","text":"569"},"Update the dependencies array to be: [formObject.clear, formObject.defaultColor, formObject.oldDefault, pixelColor]",{"range":"602","text":"603"},[1028,1053],"[PxModel, formObject.clear, formObject.defaultColor, formObject.oldDefault]",[3055,3057],"[coloringFormStore.coloringFormData, coloringFormStore.defaultColor, modelStore]",[4403,4405],"[handleKeyDown]",[364,366],"[vaseStore.modelDimensions.length]",[665,667],"[vaseStore.modelDimensions.length, vaseStore.textures]",[1644,1658],"[vaseStore]",[3522,3524],[640,657],"[coloringFormStore, swanStore.wings]",[8111,8113],[9387,9389],[336,338],"[vertices]",[408,410],"[image]",[8862,8882],"[]",[11644,11646],[370,372],"[basketStore.modelDimensions.length]",[677,679],"[basketStore.modelDimensions.length, basketStore.textures]",[6489,6505],"[basketStore]",[8101,8103],[362,364],"[figStore.modelDimensions.length]",[656,658],"[figStore.modelDimensions.length, figStore.textures]",[781,783],"[figStore.textures]",[10414,10416],[956,981],"[formObject.clear, formObject.defaultColor, formObject.oldDefault, pixelColor]"]